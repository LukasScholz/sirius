dependencies {
    compile group: 'com.lexicalscope.jewelcli', name: 'jewelcli', version: "$jewelcli_version"
    compile group: "de.unijena.bioinf.ms", name: "sirius_api", version: "$siriusVersion"
    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: "$slf4j_version"
}

processResources.doFirst {
    logger.lifecycle('writing properties file...')
    Properties properties = new Properties()
    File propertiesFileIn = new File("$projectDir/src/main/resources/siriusBuildSource.properties")
    propertiesFileIn.withReader("UTF8", {
        properties.load(it)
    })
    properties.setProperty("de.unijena.bioinf.sirius.version", "$version")
    properties.setProperty("de.unijena.bioinf.utils.errorReport.softwareName", "${project.appName}".capitalize())
    properties.setProperty("de.unijena.bioinf.sirius.build", "${project.buildNumber}".capitalize())

    File propertiesFile = new File("$projectDir/src/main/resources/siriusBuild.properties")
    propertiesFile.withWriter("UTF8", {
        properties.store(it, "")
    })
}

mainClassName = 'de.unijena.bioinf.sirius.cli.CLI'
project.ext.set("type", "console")


jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

/*################### Windows release Stuff ################### */
launch4j {
    mainClassName = project.mainClassName
    headerType = "$project.type"
    jreRuntimeBits = "$project.arch"

    outfile = "${project.appName}.exe"
    jar = "lib/${project.tasks.jar.archiveName}"
}

/*################### Build distributions ################### */
task distribute { group = 'distribution' }
distribute.dependsOn ':buildDoku'

distributions {
    project.arch.split(',').each { ar ->
        def n = "${project.linSuffix}${ar}"
        create(n, {
            baseName = "${project.appName}-$n-headless"
            contents {
                into('lib') {
                    from("build/install/${project.name}/lib") {
                        exclude("$gurobiExclude")
                    }
                    from("${project.glpkPath}/l${ar}/")
                }

                into('bin') {
                    from("build/install/${project.name}/bin") {
                        exclude("*.bat")
                    }
                    from("${project.distPath}") {
                        exclude('sirius3-gui')
                    }
                    from("${getRootDir()}/LICENSE.md")
                }
                into('doc') {
                    from(file("${project.manualPath}/build/${project.appName}-${project.version}.pdf"))
                }
                into('doc/html') {
                    from("${project.manualPath}/build/html")
                }
            }
        })
        distribute.dependsOn "${n}DistZip"
        getTasks().findByPath("${n}DistZip").dependsOn ':downloadGLPK'
        getTasksByName("${n}DistTar", false).each { it.setEnabled(false) }
    }

    //crete win32And64 zip tasks
    project.arch.split(',').each { ar ->
        def n = "${project.winSuffix}${ar}"
        create(n, {

            baseName = "${project.appName}-$n-headless"
            contents {
                into('lib') {
                    from('build/launch4j/lib') {
                        exclude("$gurobiExclude")
                    }
                }
                from { "${project.glpkPath}/w${ar}/" }
                from("${project.distPath}") {
                    exclude('sirius3-gui')
                }
                from { "${getRootDir()}/LICENSE.md" }
                from('build/launch4j') {
                    include("*-${ar}.exe")
                }
                into('doc') {
                    from(file("${project.manualPath}/build/${project.appName}-${project.version}.pdf"))
                }
                into('doc/html') {
                    from("${project.manualPath}/build/html")
                }
            }
        })
        distribute.dependsOn "${n}DistZip"
        getTasks().findByPath("${n}DistZip").dependsOn ':downloadGLPK'
        getTasksByName("${n}DistTar", false).each { it.setEnabled(false) }
    }

    //create osx zip
    def n = "${project.macSuffix}64"
    create(n, {
        baseName = "${project.appName}-$n-headless"
        contents {
            into('lib') {
                from("build/install/${project.name}/lib") {
                    exclude("$gurobiExclude")
                }
                from("${project.glpkPath}/osx/")
                exclude('*.zip')
            }

            into('bin') {
                from("build/install/${project.name}/bin") {
                    exclude("*.bat")
                }
                from("${project.distPath}")
                from("${getRootDir()}/LICENSE.md")
            }
            into('doc') {
                from(file("${project.manualPath}/build/${project.appName}-${project.version}.pdf"))
            }
            into('doc/html') {
                from("${project.manualPath}/build/html")
            }
        }
    })
    distribute.dependsOn "${n}DistZip"
    getTasks().findByPath("${n}DistZip").dependsOn ':downloadGLPK'
    getTasksByName("${n}DistTar", false).each { it.setEnabled(false) }

    project.getTasksByName("distTar", false).each { it.setEnabled(false) }
    project.getTasksByName("distZip", false).each { it.setEnabled(false) }

    linux32DistZip.dependsOn 'installDist'
    linux32DistTar.dependsOn 'installDist'
    installLinux32Dist.dependsOn 'installDist'

    linux64DistZip.dependsOn 'installDist'
    linux64DistTar.dependsOn 'installDist'
    installLinux64Dist.dependsOn 'installDist'

    win32DistZip.dependsOn 'createExe'
    win32DistTar.dependsOn 'createExe'
    installWin32Dist.dependsOn 'createExe'

    win64DistZip.dependsOn 'createExe'
    win64DistTar.dependsOn 'createExe'
    installWin64Dist.dependsOn 'createExe'

// what should be published
    publishing {
        publications {
            sirius(MavenPublication) {
                artifactId = "${project.appName}"
                groupId = "$group"

                pom.withXml {}
                artifact source: win64DistZip, classifier: 'win64-headless', extension: 'zip'
                artifact source: win32DistZip, classifier: 'win32-headless', extension: 'zip'
                artifact source: linux32DistZip, classifier: 'linux32-headless', extension: 'zip'
                artifact source: linux64DistZip, classifier: 'linux64-headless', extension: 'zip'
                artifact source: osx64DistZip, classifier: 'osx64-headless', extension: 'zip'
            }

        }
    }
    artifactoryPublish.dependsOn 'distribute'

    task runCLI(type: Exec, dependsOn: installLinux64Dist, group: 'application') {
        File command = project.tasks.installLinux64Dist.outputs.files.singleFile.toPath().resolve("bin/${project.appName}").toFile()
        commandLine([command.absolutePath])
    }
}