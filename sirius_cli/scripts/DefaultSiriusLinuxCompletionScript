#!/usr/bin/env bash
#
# sirius Bash Completion
# =======================
#
# Bash completion support for the `sirius` command,
# generated by [picocli](http://picocli.info/) version 4.6.3.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `sirius [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'sirius (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  # Only initialize completions module once to avoid unregistering existing completions.
  if ! type compdef > /dev/null; then
    autoload -U +X compinit && compinit
  fi
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# Bash completion entry point function.
# _complete_sirius finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_sirius() {
  # Edge case: if command line has no space after subcommand, then don't assume this subcommand is selected (remkop/picocli#1468).
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} project-space" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} custom-db" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} similarity" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} decomp" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} mgf-export" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ftree-export" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} prediction-export" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} login" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} generateAutocompletion" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} write-summaries" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} structure" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} canopus" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fingerprint" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} passatutto" ];    then _picocli_sirius; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config structure" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config canopus" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config fingerprint" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config passatutto" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config project-space" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config custom-db" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config similarity" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config decomp" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config mgf-export" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config ftree-export" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config prediction-export" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config login" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config generateAutocompletion" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config write-summaries" ];    then _picocli_sirius_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula" ];    then _picocli_sirius_config_lcmsalign; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula passatutto" ];    then _picocli_sirius_config_lcmsalign_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac" ];    then _picocli_sirius_config_lcmsalign_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula fingerprint" ];    then _picocli_sirius_config_lcmsalign_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula passatutto fingerprint" ];    then _picocli_sirius_config_lcmsalign_formula_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula passatutto write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula passatutto fingerprint structure" ];    then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula passatutto fingerprint canopus" ];    then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula passatutto fingerprint write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula passatutto fingerprint structure canopus" ];    then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula passatutto fingerprint structure write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula passatutto fingerprint structure canopus write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula passatutto fingerprint canopus write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac passatutto" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac fingerprint" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac passatutto fingerprint" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac passatutto write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac passatutto fingerprint structure" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac passatutto fingerprint canopus" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac passatutto fingerprint write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac passatutto fingerprint structure canopus" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac passatutto fingerprint structure write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac passatutto fingerprint structure canopus write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac passatutto fingerprint canopus write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac fingerprint structure" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac fingerprint canopus" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac fingerprint write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac fingerprint structure canopus" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac fingerprint structure write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac fingerprint structure canopus write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula zodiac fingerprint canopus write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula fingerprint structure" ];    then _picocli_sirius_config_lcmsalign_formula_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula fingerprint canopus" ];    then _picocli_sirius_config_lcmsalign_formula_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula fingerprint write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula fingerprint structure canopus" ];    then _picocli_sirius_config_lcmsalign_formula_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula fingerprint structure write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula fingerprint structure canopus write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config lcms-align formula fingerprint canopus write-summaries" ];    then _picocli_sirius_config_lcmsalign_formula_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config structure canopus" ];    then _picocli_sirius_config_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config structure write-summaries" ];    then _picocli_sirius_config_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config structure canopus write-summaries" ];    then _picocli_sirius_config_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac passatutto" ];    then _picocli_sirius_config_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac fingerprint" ];    then _picocli_sirius_config_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac write-summaries" ];    then _picocli_sirius_config_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac passatutto fingerprint" ];    then _picocli_sirius_config_zodiac_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac passatutto write-summaries" ];    then _picocli_sirius_config_zodiac_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac passatutto fingerprint structure" ];    then _picocli_sirius_config_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac passatutto fingerprint canopus" ];    then _picocli_sirius_config_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac passatutto fingerprint write-summaries" ];    then _picocli_sirius_config_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac passatutto fingerprint structure canopus" ];    then _picocli_sirius_config_zodiac_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac passatutto fingerprint structure write-summaries" ];    then _picocli_sirius_config_zodiac_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac passatutto fingerprint structure canopus write-summaries" ];    then _picocli_sirius_config_zodiac_passatutto_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac passatutto fingerprint canopus write-summaries" ];    then _picocli_sirius_config_zodiac_passatutto_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac fingerprint structure" ];    then _picocli_sirius_config_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac fingerprint canopus" ];    then _picocli_sirius_config_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac fingerprint write-summaries" ];    then _picocli_sirius_config_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac fingerprint structure canopus" ];    then _picocli_sirius_config_zodiac_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac fingerprint structure write-summaries" ];    then _picocli_sirius_config_zodiac_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac fingerprint structure canopus write-summaries" ];    then _picocli_sirius_config_zodiac_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config zodiac fingerprint canopus write-summaries" ];    then _picocli_sirius_config_zodiac_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config canopus write-summaries" ];    then _picocli_sirius_config_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config fingerprint structure" ];    then _picocli_sirius_config_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config fingerprint canopus" ];    then _picocli_sirius_config_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config fingerprint write-summaries" ];    then _picocli_sirius_config_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config fingerprint structure canopus" ];    then _picocli_sirius_config_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config fingerprint structure write-summaries" ];    then _picocli_sirius_config_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config fingerprint structure canopus write-summaries" ];    then _picocli_sirius_config_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config fingerprint canopus write-summaries" ];    then _picocli_sirius_config_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula passatutto" ];    then _picocli_sirius_config_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac" ];    then _picocli_sirius_config_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula fingerprint" ];    then _picocli_sirius_config_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula write-summaries" ];    then _picocli_sirius_config_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula passatutto fingerprint" ];    then _picocli_sirius_config_formula_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula passatutto write-summaries" ];    then _picocli_sirius_config_formula_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula passatutto fingerprint structure" ];    then _picocli_sirius_config_formula_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula passatutto fingerprint canopus" ];    then _picocli_sirius_config_formula_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula passatutto fingerprint write-summaries" ];    then _picocli_sirius_config_formula_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula passatutto fingerprint structure canopus" ];    then _picocli_sirius_config_formula_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula passatutto fingerprint structure write-summaries" ];    then _picocli_sirius_config_formula_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula passatutto fingerprint structure canopus write-summaries" ];    then _picocli_sirius_config_formula_passatutto_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula passatutto fingerprint canopus write-summaries" ];    then _picocli_sirius_config_formula_passatutto_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac passatutto" ];    then _picocli_sirius_config_formula_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac fingerprint" ];    then _picocli_sirius_config_formula_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac write-summaries" ];    then _picocli_sirius_config_formula_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac passatutto fingerprint" ];    then _picocli_sirius_config_formula_zodiac_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac passatutto write-summaries" ];    then _picocli_sirius_config_formula_zodiac_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac passatutto fingerprint structure" ];    then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac passatutto fingerprint canopus" ];    then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac passatutto fingerprint write-summaries" ];    then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac passatutto fingerprint structure canopus" ];    then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac passatutto fingerprint structure write-summaries" ];    then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac passatutto fingerprint structure canopus write-summaries" ];    then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac passatutto fingerprint canopus write-summaries" ];    then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac fingerprint structure" ];    then _picocli_sirius_config_formula_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac fingerprint canopus" ];    then _picocli_sirius_config_formula_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac fingerprint write-summaries" ];    then _picocli_sirius_config_formula_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac fingerprint structure canopus" ];    then _picocli_sirius_config_formula_zodiac_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac fingerprint structure write-summaries" ];    then _picocli_sirius_config_formula_zodiac_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac fingerprint structure canopus write-summaries" ];    then _picocli_sirius_config_formula_zodiac_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula zodiac fingerprint canopus write-summaries" ];    then _picocli_sirius_config_formula_zodiac_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula fingerprint structure" ];    then _picocli_sirius_config_formula_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula fingerprint canopus" ];    then _picocli_sirius_config_formula_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula fingerprint write-summaries" ];    then _picocli_sirius_config_formula_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula fingerprint structure canopus" ];    then _picocli_sirius_config_formula_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula fingerprint structure write-summaries" ];    then _picocli_sirius_config_formula_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula fingerprint structure canopus write-summaries" ];    then _picocli_sirius_config_formula_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config formula fingerprint canopus write-summaries" ];    then _picocli_sirius_config_formula_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config passatutto fingerprint" ];    then _picocli_sirius_config_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config passatutto write-summaries" ];    then _picocli_sirius_config_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config passatutto fingerprint structure" ];    then _picocli_sirius_config_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config passatutto fingerprint canopus" ];    then _picocli_sirius_config_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config passatutto fingerprint write-summaries" ];    then _picocli_sirius_config_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config passatutto fingerprint structure canopus" ];    then _picocli_sirius_config_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config passatutto fingerprint structure write-summaries" ];    then _picocli_sirius_config_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config passatutto fingerprint structure canopus write-summaries" ];    then _picocli_sirius_config_passatutto_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config passatutto fingerprint canopus write-summaries" ];    then _picocli_sirius_config_passatutto_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula" ];    then _picocli_sirius_lcmsalign; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula passatutto" ];    then _picocli_sirius_lcmsalign_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac" ];    then _picocli_sirius_lcmsalign_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula fingerprint" ];    then _picocli_sirius_lcmsalign_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula write-summaries" ];    then _picocli_sirius_lcmsalign_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula passatutto fingerprint" ];    then _picocli_sirius_lcmsalign_formula_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula passatutto write-summaries" ];    then _picocli_sirius_lcmsalign_formula_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula passatutto fingerprint structure" ];    then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula passatutto fingerprint canopus" ];    then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula passatutto fingerprint write-summaries" ];    then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula passatutto fingerprint structure canopus" ];    then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula passatutto fingerprint structure write-summaries" ];    then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula passatutto fingerprint structure canopus write-summaries" ];    then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula passatutto fingerprint canopus write-summaries" ];    then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac passatutto" ];    then _picocli_sirius_lcmsalign_formula_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac fingerprint" ];    then _picocli_sirius_lcmsalign_formula_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac write-summaries" ];    then _picocli_sirius_lcmsalign_formula_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac passatutto fingerprint" ];    then _picocli_sirius_lcmsalign_formula_zodiac_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac passatutto write-summaries" ];    then _picocli_sirius_lcmsalign_formula_zodiac_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac passatutto fingerprint structure" ];    then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac passatutto fingerprint canopus" ];    then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac passatutto fingerprint write-summaries" ];    then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac passatutto fingerprint structure canopus" ];    then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac passatutto fingerprint structure write-summaries" ];    then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac passatutto fingerprint structure canopus write-summaries" ];    then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac passatutto fingerprint canopus write-summaries" ];    then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac fingerprint structure" ];    then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac fingerprint canopus" ];    then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac fingerprint write-summaries" ];    then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac fingerprint structure canopus" ];    then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac fingerprint structure write-summaries" ];    then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac fingerprint structure canopus write-summaries" ];    then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula zodiac fingerprint canopus write-summaries" ];    then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula fingerprint structure" ];    then _picocli_sirius_lcmsalign_formula_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula fingerprint canopus" ];    then _picocli_sirius_lcmsalign_formula_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula fingerprint write-summaries" ];    then _picocli_sirius_lcmsalign_formula_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula fingerprint structure canopus" ];    then _picocli_sirius_lcmsalign_formula_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula fingerprint structure write-summaries" ];    then _picocli_sirius_lcmsalign_formula_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula fingerprint structure canopus write-summaries" ];    then _picocli_sirius_lcmsalign_formula_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} lcms-align formula fingerprint canopus write-summaries" ];    then _picocli_sirius_lcmsalign_formula_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} structure canopus" ];    then _picocli_sirius_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} structure write-summaries" ];    then _picocli_sirius_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} structure canopus write-summaries" ];    then _picocli_sirius_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac passatutto" ];    then _picocli_sirius_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac fingerprint" ];    then _picocli_sirius_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac write-summaries" ];    then _picocli_sirius_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac passatutto fingerprint" ];    then _picocli_sirius_zodiac_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac passatutto write-summaries" ];    then _picocli_sirius_zodiac_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac passatutto fingerprint structure" ];    then _picocli_sirius_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac passatutto fingerprint canopus" ];    then _picocli_sirius_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac passatutto fingerprint write-summaries" ];    then _picocli_sirius_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac passatutto fingerprint structure canopus" ];    then _picocli_sirius_zodiac_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac passatutto fingerprint structure write-summaries" ];    then _picocli_sirius_zodiac_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac passatutto fingerprint structure canopus write-summaries" ];    then _picocli_sirius_zodiac_passatutto_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac passatutto fingerprint canopus write-summaries" ];    then _picocli_sirius_zodiac_passatutto_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac fingerprint structure" ];    then _picocli_sirius_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac fingerprint canopus" ];    then _picocli_sirius_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac fingerprint write-summaries" ];    then _picocli_sirius_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac fingerprint structure canopus" ];    then _picocli_sirius_zodiac_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac fingerprint structure write-summaries" ];    then _picocli_sirius_zodiac_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac fingerprint structure canopus write-summaries" ];    then _picocli_sirius_zodiac_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} zodiac fingerprint canopus write-summaries" ];    then _picocli_sirius_zodiac_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} canopus write-summaries" ];    then _picocli_sirius_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fingerprint structure" ];    then _picocli_sirius_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fingerprint canopus" ];    then _picocli_sirius_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fingerprint write-summaries" ];    then _picocli_sirius_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fingerprint structure canopus" ];    then _picocli_sirius_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fingerprint structure write-summaries" ];    then _picocli_sirius_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fingerprint structure canopus write-summaries" ];    then _picocli_sirius_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} fingerprint canopus write-summaries" ];    then _picocli_sirius_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula passatutto" ];    then _picocli_sirius_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac" ];    then _picocli_sirius_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula fingerprint" ];    then _picocli_sirius_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula write-summaries" ];    then _picocli_sirius_formula; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula passatutto fingerprint" ];    then _picocli_sirius_formula_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula passatutto write-summaries" ];    then _picocli_sirius_formula_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula passatutto fingerprint structure" ];    then _picocli_sirius_formula_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula passatutto fingerprint canopus" ];    then _picocli_sirius_formula_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula passatutto fingerprint write-summaries" ];    then _picocli_sirius_formula_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula passatutto fingerprint structure canopus" ];    then _picocli_sirius_formula_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula passatutto fingerprint structure write-summaries" ];    then _picocli_sirius_formula_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula passatutto fingerprint structure canopus write-summaries" ];    then _picocli_sirius_formula_passatutto_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula passatutto fingerprint canopus write-summaries" ];    then _picocli_sirius_formula_passatutto_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac passatutto" ];    then _picocli_sirius_formula_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac fingerprint" ];    then _picocli_sirius_formula_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac write-summaries" ];    then _picocli_sirius_formula_zodiac; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac passatutto fingerprint" ];    then _picocli_sirius_formula_zodiac_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac passatutto write-summaries" ];    then _picocli_sirius_formula_zodiac_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac passatutto fingerprint structure" ];    then _picocli_sirius_formula_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac passatutto fingerprint canopus" ];    then _picocli_sirius_formula_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac passatutto fingerprint write-summaries" ];    then _picocli_sirius_formula_zodiac_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac passatutto fingerprint structure canopus" ];    then _picocli_sirius_formula_zodiac_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac passatutto fingerprint structure write-summaries" ];    then _picocli_sirius_formula_zodiac_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac passatutto fingerprint structure canopus write-summaries" ];    then _picocli_sirius_formula_zodiac_passatutto_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac passatutto fingerprint canopus write-summaries" ];    then _picocli_sirius_formula_zodiac_passatutto_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac fingerprint structure" ];    then _picocli_sirius_formula_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac fingerprint canopus" ];    then _picocli_sirius_formula_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac fingerprint write-summaries" ];    then _picocli_sirius_formula_zodiac_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac fingerprint structure canopus" ];    then _picocli_sirius_formula_zodiac_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac fingerprint structure write-summaries" ];    then _picocli_sirius_formula_zodiac_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac fingerprint structure canopus write-summaries" ];    then _picocli_sirius_formula_zodiac_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula zodiac fingerprint canopus write-summaries" ];    then _picocli_sirius_formula_zodiac_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula fingerprint structure" ];    then _picocli_sirius_formula_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula fingerprint canopus" ];    then _picocli_sirius_formula_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula fingerprint write-summaries" ];    then _picocli_sirius_formula_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula fingerprint structure canopus" ];    then _picocli_sirius_formula_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula fingerprint structure write-summaries" ];    then _picocli_sirius_formula_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula fingerprint structure canopus write-summaries" ];    then _picocli_sirius_formula_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} formula fingerprint canopus write-summaries" ];    then _picocli_sirius_formula_fingerprint_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} passatutto fingerprint" ];    then _picocli_sirius_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} passatutto write-summaries" ];    then _picocli_sirius_passatutto; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} passatutto fingerprint structure" ];    then _picocli_sirius_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} passatutto fingerprint canopus" ];    then _picocli_sirius_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} passatutto fingerprint write-summaries" ];    then _picocli_sirius_passatutto_fingerprint; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} passatutto fingerprint structure canopus" ];    then _picocli_sirius_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} passatutto fingerprint structure write-summaries" ];    then _picocli_sirius_passatutto_fingerprint_structure; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} passatutto fingerprint structure canopus write-summaries" ];    then _picocli_sirius_passatutto_fingerprint_structure_canopus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} passatutto fingerprint canopus write-summaries" ];    then _picocli_sirius_passatutto_fingerprint_canopus; return $?; fi

  # Find the longest sequence of subcommands and call the bash function for that subcommand.
  local cmds0=(config)
  local cmds1=(project-space)
  local cmds2=(custom-db)
  local cmds3=(similarity)
  local cmds4=(decomp)
  local cmds5=(mgf-export)
  local cmds6=(ftree-export)
  local cmds7=(prediction-export)
  local cmds8=(login)
  local cmds9=(generateAutocompletion)
  local cmds10=(write-summaries)
  local cmds11=(lcms-align)
  local cmds12=(structure)
  local cmds13=(zodiac)
  local cmds14=(canopus)
  local cmds15=(fingerprint)
  local cmds16=(formula)
  local cmds17=(passatutto)
  local cmds18=(config lcms-align)
  local cmds19=(config structure)
  local cmds20=(config zodiac)
  local cmds21=(config canopus)
  local cmds22=(config fingerprint)
  local cmds23=(config formula)
  local cmds24=(config passatutto)
  local cmds25=(config project-space)
  local cmds26=(config custom-db)
  local cmds27=(config similarity)
  local cmds28=(config decomp)
  local cmds29=(config mgf-export)
  local cmds30=(config ftree-export)
  local cmds31=(config prediction-export)
  local cmds32=(config login)
  local cmds33=(config generateAutocompletion)
  local cmds34=(config write-summaries)
  local cmds35=(config lcms-align formula)
  local cmds36=(config lcms-align formula passatutto)
  local cmds37=(config lcms-align formula zodiac)
  local cmds38=(config lcms-align formula fingerprint)
  local cmds39=(config lcms-align formula write-summaries)
  local cmds40=(config lcms-align formula passatutto fingerprint)
  local cmds41=(config lcms-align formula passatutto write-summaries)
  local cmds42=(config lcms-align formula passatutto fingerprint structure)
  local cmds43=(config lcms-align formula passatutto fingerprint canopus)
  local cmds44=(config lcms-align formula passatutto fingerprint write-summaries)
  local cmds45=(config lcms-align formula passatutto fingerprint structure canopus)
  local cmds46=(config lcms-align formula passatutto fingerprint structure write-summaries)
  local cmds47=(config lcms-align formula passatutto fingerprint structure canopus write-summaries)
  local cmds48=(config lcms-align formula passatutto fingerprint canopus write-summaries)
  local cmds49=(config lcms-align formula zodiac passatutto)
  local cmds50=(config lcms-align formula zodiac fingerprint)
  local cmds51=(config lcms-align formula zodiac write-summaries)
  local cmds52=(config lcms-align formula zodiac passatutto fingerprint)
  local cmds53=(config lcms-align formula zodiac passatutto write-summaries)
  local cmds54=(config lcms-align formula zodiac passatutto fingerprint structure)
  local cmds55=(config lcms-align formula zodiac passatutto fingerprint canopus)
  local cmds56=(config lcms-align formula zodiac passatutto fingerprint write-summaries)
  local cmds57=(config lcms-align formula zodiac passatutto fingerprint structure canopus)
  local cmds58=(config lcms-align formula zodiac passatutto fingerprint structure write-summaries)
  local cmds59=(config lcms-align formula zodiac passatutto fingerprint structure canopus write-summaries)
  local cmds60=(config lcms-align formula zodiac passatutto fingerprint canopus write-summaries)
  local cmds61=(config lcms-align formula zodiac fingerprint structure)
  local cmds62=(config lcms-align formula zodiac fingerprint canopus)
  local cmds63=(config lcms-align formula zodiac fingerprint write-summaries)
  local cmds64=(config lcms-align formula zodiac fingerprint structure canopus)
  local cmds65=(config lcms-align formula zodiac fingerprint structure write-summaries)
  local cmds66=(config lcms-align formula zodiac fingerprint structure canopus write-summaries)
  local cmds67=(config lcms-align formula zodiac fingerprint canopus write-summaries)
  local cmds68=(config lcms-align formula fingerprint structure)
  local cmds69=(config lcms-align formula fingerprint canopus)
  local cmds70=(config lcms-align formula fingerprint write-summaries)
  local cmds71=(config lcms-align formula fingerprint structure canopus)
  local cmds72=(config lcms-align formula fingerprint structure write-summaries)
  local cmds73=(config lcms-align formula fingerprint structure canopus write-summaries)
  local cmds74=(config lcms-align formula fingerprint canopus write-summaries)
  local cmds75=(config structure canopus)
  local cmds76=(config structure write-summaries)
  local cmds77=(config structure canopus write-summaries)
  local cmds78=(config zodiac passatutto)
  local cmds79=(config zodiac fingerprint)
  local cmds80=(config zodiac write-summaries)
  local cmds81=(config zodiac passatutto fingerprint)
  local cmds82=(config zodiac passatutto write-summaries)
  local cmds83=(config zodiac passatutto fingerprint structure)
  local cmds84=(config zodiac passatutto fingerprint canopus)
  local cmds85=(config zodiac passatutto fingerprint write-summaries)
  local cmds86=(config zodiac passatutto fingerprint structure canopus)
  local cmds87=(config zodiac passatutto fingerprint structure write-summaries)
  local cmds88=(config zodiac passatutto fingerprint structure canopus write-summaries)
  local cmds89=(config zodiac passatutto fingerprint canopus write-summaries)
  local cmds90=(config zodiac fingerprint structure)
  local cmds91=(config zodiac fingerprint canopus)
  local cmds92=(config zodiac fingerprint write-summaries)
  local cmds93=(config zodiac fingerprint structure canopus)
  local cmds94=(config zodiac fingerprint structure write-summaries)
  local cmds95=(config zodiac fingerprint structure canopus write-summaries)
  local cmds96=(config zodiac fingerprint canopus write-summaries)
  local cmds97=(config canopus write-summaries)
  local cmds98=(config fingerprint structure)
  local cmds99=(config fingerprint canopus)
  local cmds100=(config fingerprint write-summaries)
  local cmds101=(config fingerprint structure canopus)
  local cmds102=(config fingerprint structure write-summaries)
  local cmds103=(config fingerprint structure canopus write-summaries)
  local cmds104=(config fingerprint canopus write-summaries)
  local cmds105=(config formula passatutto)
  local cmds106=(config formula zodiac)
  local cmds107=(config formula fingerprint)
  local cmds108=(config formula write-summaries)
  local cmds109=(config formula passatutto fingerprint)
  local cmds110=(config formula passatutto write-summaries)
  local cmds111=(config formula passatutto fingerprint structure)
  local cmds112=(config formula passatutto fingerprint canopus)
  local cmds113=(config formula passatutto fingerprint write-summaries)
  local cmds114=(config formula passatutto fingerprint structure canopus)
  local cmds115=(config formula passatutto fingerprint structure write-summaries)
  local cmds116=(config formula passatutto fingerprint structure canopus write-summaries)
  local cmds117=(config formula passatutto fingerprint canopus write-summaries)
  local cmds118=(config formula zodiac passatutto)
  local cmds119=(config formula zodiac fingerprint)
  local cmds120=(config formula zodiac write-summaries)
  local cmds121=(config formula zodiac passatutto fingerprint)
  local cmds122=(config formula zodiac passatutto write-summaries)
  local cmds123=(config formula zodiac passatutto fingerprint structure)
  local cmds124=(config formula zodiac passatutto fingerprint canopus)
  local cmds125=(config formula zodiac passatutto fingerprint write-summaries)
  local cmds126=(config formula zodiac passatutto fingerprint structure canopus)
  local cmds127=(config formula zodiac passatutto fingerprint structure write-summaries)
  local cmds128=(config formula zodiac passatutto fingerprint structure canopus write-summaries)
  local cmds129=(config formula zodiac passatutto fingerprint canopus write-summaries)
  local cmds130=(config formula zodiac fingerprint structure)
  local cmds131=(config formula zodiac fingerprint canopus)
  local cmds132=(config formula zodiac fingerprint write-summaries)
  local cmds133=(config formula zodiac fingerprint structure canopus)
  local cmds134=(config formula zodiac fingerprint structure write-summaries)
  local cmds135=(config formula zodiac fingerprint structure canopus write-summaries)
  local cmds136=(config formula zodiac fingerprint canopus write-summaries)
  local cmds137=(config formula fingerprint structure)
  local cmds138=(config formula fingerprint canopus)
  local cmds139=(config formula fingerprint write-summaries)
  local cmds140=(config formula fingerprint structure canopus)
  local cmds141=(config formula fingerprint structure write-summaries)
  local cmds142=(config formula fingerprint structure canopus write-summaries)
  local cmds143=(config formula fingerprint canopus write-summaries)
  local cmds144=(config passatutto fingerprint)
  local cmds145=(config passatutto write-summaries)
  local cmds146=(config passatutto fingerprint structure)
  local cmds147=(config passatutto fingerprint canopus)
  local cmds148=(config passatutto fingerprint write-summaries)
  local cmds149=(config passatutto fingerprint structure canopus)
  local cmds150=(config passatutto fingerprint structure write-summaries)
  local cmds151=(config passatutto fingerprint structure canopus write-summaries)
  local cmds152=(config passatutto fingerprint canopus write-summaries)
  local cmds153=(lcms-align formula)
  local cmds154=(lcms-align formula passatutto)
  local cmds155=(lcms-align formula zodiac)
  local cmds156=(lcms-align formula fingerprint)
  local cmds157=(lcms-align formula write-summaries)
  local cmds158=(lcms-align formula passatutto fingerprint)
  local cmds159=(lcms-align formula passatutto write-summaries)
  local cmds160=(lcms-align formula passatutto fingerprint structure)
  local cmds161=(lcms-align formula passatutto fingerprint canopus)
  local cmds162=(lcms-align formula passatutto fingerprint write-summaries)
  local cmds163=(lcms-align formula passatutto fingerprint structure canopus)
  local cmds164=(lcms-align formula passatutto fingerprint structure write-summaries)
  local cmds165=(lcms-align formula passatutto fingerprint structure canopus write-summaries)
  local cmds166=(lcms-align formula passatutto fingerprint canopus write-summaries)
  local cmds167=(lcms-align formula zodiac passatutto)
  local cmds168=(lcms-align formula zodiac fingerprint)
  local cmds169=(lcms-align formula zodiac write-summaries)
  local cmds170=(lcms-align formula zodiac passatutto fingerprint)
  local cmds171=(lcms-align formula zodiac passatutto write-summaries)
  local cmds172=(lcms-align formula zodiac passatutto fingerprint structure)
  local cmds173=(lcms-align formula zodiac passatutto fingerprint canopus)
  local cmds174=(lcms-align formula zodiac passatutto fingerprint write-summaries)
  local cmds175=(lcms-align formula zodiac passatutto fingerprint structure canopus)
  local cmds176=(lcms-align formula zodiac passatutto fingerprint structure write-summaries)
  local cmds177=(lcms-align formula zodiac passatutto fingerprint structure canopus write-summaries)
  local cmds178=(lcms-align formula zodiac passatutto fingerprint canopus write-summaries)
  local cmds179=(lcms-align formula zodiac fingerprint structure)
  local cmds180=(lcms-align formula zodiac fingerprint canopus)
  local cmds181=(lcms-align formula zodiac fingerprint write-summaries)
  local cmds182=(lcms-align formula zodiac fingerprint structure canopus)
  local cmds183=(lcms-align formula zodiac fingerprint structure write-summaries)
  local cmds184=(lcms-align formula zodiac fingerprint structure canopus write-summaries)
  local cmds185=(lcms-align formula zodiac fingerprint canopus write-summaries)
  local cmds186=(lcms-align formula fingerprint structure)
  local cmds187=(lcms-align formula fingerprint canopus)
  local cmds188=(lcms-align formula fingerprint write-summaries)
  local cmds189=(lcms-align formula fingerprint structure canopus)
  local cmds190=(lcms-align formula fingerprint structure write-summaries)
  local cmds191=(lcms-align formula fingerprint structure canopus write-summaries)
  local cmds192=(lcms-align formula fingerprint canopus write-summaries)
  local cmds193=(structure canopus)
  local cmds194=(structure write-summaries)
  local cmds195=(structure canopus write-summaries)
  local cmds196=(zodiac passatutto)
  local cmds197=(zodiac fingerprint)
  local cmds198=(zodiac write-summaries)
  local cmds199=(zodiac passatutto fingerprint)
  local cmds200=(zodiac passatutto write-summaries)
  local cmds201=(zodiac passatutto fingerprint structure)
  local cmds202=(zodiac passatutto fingerprint canopus)
  local cmds203=(zodiac passatutto fingerprint write-summaries)
  local cmds204=(zodiac passatutto fingerprint structure canopus)
  local cmds205=(zodiac passatutto fingerprint structure write-summaries)
  local cmds206=(zodiac passatutto fingerprint structure canopus write-summaries)
  local cmds207=(zodiac passatutto fingerprint canopus write-summaries)
  local cmds208=(zodiac fingerprint structure)
  local cmds209=(zodiac fingerprint canopus)
  local cmds210=(zodiac fingerprint write-summaries)
  local cmds211=(zodiac fingerprint structure canopus)
  local cmds212=(zodiac fingerprint structure write-summaries)
  local cmds213=(zodiac fingerprint structure canopus write-summaries)
  local cmds214=(zodiac fingerprint canopus write-summaries)
  local cmds215=(canopus write-summaries)
  local cmds216=(fingerprint structure)
  local cmds217=(fingerprint canopus)
  local cmds218=(fingerprint write-summaries)
  local cmds219=(fingerprint structure canopus)
  local cmds220=(fingerprint structure write-summaries)
  local cmds221=(fingerprint structure canopus write-summaries)
  local cmds222=(fingerprint canopus write-summaries)
  local cmds223=(formula passatutto)
  local cmds224=(formula zodiac)
  local cmds225=(formula fingerprint)
  local cmds226=(formula write-summaries)
  local cmds227=(formula passatutto fingerprint)
  local cmds228=(formula passatutto write-summaries)
  local cmds229=(formula passatutto fingerprint structure)
  local cmds230=(formula passatutto fingerprint canopus)
  local cmds231=(formula passatutto fingerprint write-summaries)
  local cmds232=(formula passatutto fingerprint structure canopus)
  local cmds233=(formula passatutto fingerprint structure write-summaries)
  local cmds234=(formula passatutto fingerprint structure canopus write-summaries)
  local cmds235=(formula passatutto fingerprint canopus write-summaries)
  local cmds236=(formula zodiac passatutto)
  local cmds237=(formula zodiac fingerprint)
  local cmds238=(formula zodiac write-summaries)
  local cmds239=(formula zodiac passatutto fingerprint)
  local cmds240=(formula zodiac passatutto write-summaries)
  local cmds241=(formula zodiac passatutto fingerprint structure)
  local cmds242=(formula zodiac passatutto fingerprint canopus)
  local cmds243=(formula zodiac passatutto fingerprint write-summaries)
  local cmds244=(formula zodiac passatutto fingerprint structure canopus)
  local cmds245=(formula zodiac passatutto fingerprint structure write-summaries)
  local cmds246=(formula zodiac passatutto fingerprint structure canopus write-summaries)
  local cmds247=(formula zodiac passatutto fingerprint canopus write-summaries)
  local cmds248=(formula zodiac fingerprint structure)
  local cmds249=(formula zodiac fingerprint canopus)
  local cmds250=(formula zodiac fingerprint write-summaries)
  local cmds251=(formula zodiac fingerprint structure canopus)
  local cmds252=(formula zodiac fingerprint structure write-summaries)
  local cmds253=(formula zodiac fingerprint structure canopus write-summaries)
  local cmds254=(formula zodiac fingerprint canopus write-summaries)
  local cmds255=(formula fingerprint structure)
  local cmds256=(formula fingerprint canopus)
  local cmds257=(formula fingerprint write-summaries)
  local cmds258=(formula fingerprint structure canopus)
  local cmds259=(formula fingerprint structure write-summaries)
  local cmds260=(formula fingerprint structure canopus write-summaries)
  local cmds261=(formula fingerprint canopus write-summaries)
  local cmds262=(passatutto fingerprint)
  local cmds263=(passatutto write-summaries)
  local cmds264=(passatutto fingerprint structure)
  local cmds265=(passatutto fingerprint canopus)
  local cmds266=(passatutto fingerprint write-summaries)
  local cmds267=(passatutto fingerprint structure canopus)
  local cmds268=(passatutto fingerprint structure write-summaries)
  local cmds269=(passatutto fingerprint structure canopus write-summaries)
  local cmds270=(passatutto fingerprint canopus write-summaries)

  if CompWordsContainsArray "${cmds270[@]}"; then _picocli_sirius_passatutto_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds269[@]}"; then _picocli_sirius_passatutto_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds268[@]}"; then _picocli_sirius_passatutto_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds267[@]}"; then _picocli_sirius_passatutto_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds266[@]}"; then _picocli_sirius_passatutto_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds265[@]}"; then _picocli_sirius_passatutto_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds264[@]}"; then _picocli_sirius_passatutto_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds263[@]}"; then _picocli_sirius_passatutto_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds262[@]}"; then _picocli_sirius_passatutto_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds261[@]}"; then _picocli_sirius_formula_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds260[@]}"; then _picocli_sirius_formula_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds259[@]}"; then _picocli_sirius_formula_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds258[@]}"; then _picocli_sirius_formula_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds257[@]}"; then _picocli_sirius_formula_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds256[@]}"; then _picocli_sirius_formula_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds255[@]}"; then _picocli_sirius_formula_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds254[@]}"; then _picocli_sirius_formula_zodiac_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds253[@]}"; then _picocli_sirius_formula_zodiac_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds252[@]}"; then _picocli_sirius_formula_zodiac_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds251[@]}"; then _picocli_sirius_formula_zodiac_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds250[@]}"; then _picocli_sirius_formula_zodiac_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds249[@]}"; then _picocli_sirius_formula_zodiac_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds248[@]}"; then _picocli_sirius_formula_zodiac_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds247[@]}"; then _picocli_sirius_formula_zodiac_passatutto_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds246[@]}"; then _picocli_sirius_formula_zodiac_passatutto_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds245[@]}"; then _picocli_sirius_formula_zodiac_passatutto_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds244[@]}"; then _picocli_sirius_formula_zodiac_passatutto_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds243[@]}"; then _picocli_sirius_formula_zodiac_passatutto_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds242[@]}"; then _picocli_sirius_formula_zodiac_passatutto_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds241[@]}"; then _picocli_sirius_formula_zodiac_passatutto_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds240[@]}"; then _picocli_sirius_formula_zodiac_passatutto_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds239[@]}"; then _picocli_sirius_formula_zodiac_passatutto_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds238[@]}"; then _picocli_sirius_formula_zodiac_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds237[@]}"; then _picocli_sirius_formula_zodiac_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds236[@]}"; then _picocli_sirius_formula_zodiac_passatutto; return $?; fi
  if CompWordsContainsArray "${cmds235[@]}"; then _picocli_sirius_formula_passatutto_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds234[@]}"; then _picocli_sirius_formula_passatutto_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds233[@]}"; then _picocli_sirius_formula_passatutto_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds232[@]}"; then _picocli_sirius_formula_passatutto_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds231[@]}"; then _picocli_sirius_formula_passatutto_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds230[@]}"; then _picocli_sirius_formula_passatutto_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds229[@]}"; then _picocli_sirius_formula_passatutto_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds228[@]}"; then _picocli_sirius_formula_passatutto_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds227[@]}"; then _picocli_sirius_formula_passatutto_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds226[@]}"; then _picocli_sirius_formula_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds225[@]}"; then _picocli_sirius_formula_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds224[@]}"; then _picocli_sirius_formula_zodiac; return $?; fi
  if CompWordsContainsArray "${cmds223[@]}"; then _picocli_sirius_formula_passatutto; return $?; fi
  if CompWordsContainsArray "${cmds222[@]}"; then _picocli_sirius_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds221[@]}"; then _picocli_sirius_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds220[@]}"; then _picocli_sirius_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds219[@]}"; then _picocli_sirius_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds218[@]}"; then _picocli_sirius_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds217[@]}"; then _picocli_sirius_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds216[@]}"; then _picocli_sirius_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds215[@]}"; then _picocli_sirius_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds214[@]}"; then _picocli_sirius_zodiac_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds213[@]}"; then _picocli_sirius_zodiac_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds212[@]}"; then _picocli_sirius_zodiac_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds211[@]}"; then _picocli_sirius_zodiac_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds210[@]}"; then _picocli_sirius_zodiac_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds209[@]}"; then _picocli_sirius_zodiac_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds208[@]}"; then _picocli_sirius_zodiac_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds207[@]}"; then _picocli_sirius_zodiac_passatutto_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds206[@]}"; then _picocli_sirius_zodiac_passatutto_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds205[@]}"; then _picocli_sirius_zodiac_passatutto_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds204[@]}"; then _picocli_sirius_zodiac_passatutto_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds203[@]}"; then _picocli_sirius_zodiac_passatutto_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds202[@]}"; then _picocli_sirius_zodiac_passatutto_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds201[@]}"; then _picocli_sirius_zodiac_passatutto_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds200[@]}"; then _picocli_sirius_zodiac_passatutto_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds199[@]}"; then _picocli_sirius_zodiac_passatutto_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds198[@]}"; then _picocli_sirius_zodiac_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds197[@]}"; then _picocli_sirius_zodiac_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds196[@]}"; then _picocli_sirius_zodiac_passatutto; return $?; fi
  if CompWordsContainsArray "${cmds195[@]}"; then _picocli_sirius_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds194[@]}"; then _picocli_sirius_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds193[@]}"; then _picocli_sirius_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds192[@]}"; then _picocli_sirius_lcmsalign_formula_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds191[@]}"; then _picocli_sirius_lcmsalign_formula_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds190[@]}"; then _picocli_sirius_lcmsalign_formula_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds189[@]}"; then _picocli_sirius_lcmsalign_formula_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds188[@]}"; then _picocli_sirius_lcmsalign_formula_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds187[@]}"; then _picocli_sirius_lcmsalign_formula_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds186[@]}"; then _picocli_sirius_lcmsalign_formula_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds185[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds184[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds183[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds182[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds181[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds180[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds179[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds178[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds177[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds176[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds175[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds174[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds173[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds172[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds171[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds170[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds169[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds168[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds167[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac_passatutto; return $?; fi
  if CompWordsContainsArray "${cmds166[@]}"; then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds165[@]}"; then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds164[@]}"; then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds163[@]}"; then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds162[@]}"; then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds161[@]}"; then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds160[@]}"; then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds159[@]}"; then _picocli_sirius_lcmsalign_formula_passatutto_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds158[@]}"; then _picocli_sirius_lcmsalign_formula_passatutto_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds157[@]}"; then _picocli_sirius_lcmsalign_formula_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds156[@]}"; then _picocli_sirius_lcmsalign_formula_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds155[@]}"; then _picocli_sirius_lcmsalign_formula_zodiac; return $?; fi
  if CompWordsContainsArray "${cmds154[@]}"; then _picocli_sirius_lcmsalign_formula_passatutto; return $?; fi
  if CompWordsContainsArray "${cmds153[@]}"; then _picocli_sirius_lcmsalign_formula; return $?; fi
  if CompWordsContainsArray "${cmds152[@]}"; then _picocli_sirius_config_passatutto_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds151[@]}"; then _picocli_sirius_config_passatutto_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds150[@]}"; then _picocli_sirius_config_passatutto_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds149[@]}"; then _picocli_sirius_config_passatutto_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds148[@]}"; then _picocli_sirius_config_passatutto_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds147[@]}"; then _picocli_sirius_config_passatutto_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds146[@]}"; then _picocli_sirius_config_passatutto_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds145[@]}"; then _picocli_sirius_config_passatutto_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds144[@]}"; then _picocli_sirius_config_passatutto_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds143[@]}"; then _picocli_sirius_config_formula_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds142[@]}"; then _picocli_sirius_config_formula_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds141[@]}"; then _picocli_sirius_config_formula_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds140[@]}"; then _picocli_sirius_config_formula_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds139[@]}"; then _picocli_sirius_config_formula_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds138[@]}"; then _picocli_sirius_config_formula_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds137[@]}"; then _picocli_sirius_config_formula_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds136[@]}"; then _picocli_sirius_config_formula_zodiac_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds135[@]}"; then _picocli_sirius_config_formula_zodiac_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds134[@]}"; then _picocli_sirius_config_formula_zodiac_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds133[@]}"; then _picocli_sirius_config_formula_zodiac_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds132[@]}"; then _picocli_sirius_config_formula_zodiac_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds131[@]}"; then _picocli_sirius_config_formula_zodiac_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds130[@]}"; then _picocli_sirius_config_formula_zodiac_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds129[@]}"; then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds128[@]}"; then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds127[@]}"; then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds126[@]}"; then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds125[@]}"; then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds124[@]}"; then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds123[@]}"; then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds122[@]}"; then _picocli_sirius_config_formula_zodiac_passatutto_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds121[@]}"; then _picocli_sirius_config_formula_zodiac_passatutto_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds120[@]}"; then _picocli_sirius_config_formula_zodiac_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds119[@]}"; then _picocli_sirius_config_formula_zodiac_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds118[@]}"; then _picocli_sirius_config_formula_zodiac_passatutto; return $?; fi
  if CompWordsContainsArray "${cmds117[@]}"; then _picocli_sirius_config_formula_passatutto_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds116[@]}"; then _picocli_sirius_config_formula_passatutto_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds115[@]}"; then _picocli_sirius_config_formula_passatutto_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds114[@]}"; then _picocli_sirius_config_formula_passatutto_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds113[@]}"; then _picocli_sirius_config_formula_passatutto_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds112[@]}"; then _picocli_sirius_config_formula_passatutto_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds111[@]}"; then _picocli_sirius_config_formula_passatutto_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds110[@]}"; then _picocli_sirius_config_formula_passatutto_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds109[@]}"; then _picocli_sirius_config_formula_passatutto_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds108[@]}"; then _picocli_sirius_config_formula_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds107[@]}"; then _picocli_sirius_config_formula_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds106[@]}"; then _picocli_sirius_config_formula_zodiac; return $?; fi
  if CompWordsContainsArray "${cmds105[@]}"; then _picocli_sirius_config_formula_passatutto; return $?; fi
  if CompWordsContainsArray "${cmds104[@]}"; then _picocli_sirius_config_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds103[@]}"; then _picocli_sirius_config_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds102[@]}"; then _picocli_sirius_config_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds101[@]}"; then _picocli_sirius_config_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds100[@]}"; then _picocli_sirius_config_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds99[@]}"; then _picocli_sirius_config_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds98[@]}"; then _picocli_sirius_config_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds97[@]}"; then _picocli_sirius_config_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds96[@]}"; then _picocli_sirius_config_zodiac_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds95[@]}"; then _picocli_sirius_config_zodiac_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds94[@]}"; then _picocli_sirius_config_zodiac_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds93[@]}"; then _picocli_sirius_config_zodiac_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds92[@]}"; then _picocli_sirius_config_zodiac_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds91[@]}"; then _picocli_sirius_config_zodiac_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds90[@]}"; then _picocli_sirius_config_zodiac_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds89[@]}"; then _picocli_sirius_config_zodiac_passatutto_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds88[@]}"; then _picocli_sirius_config_zodiac_passatutto_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds87[@]}"; then _picocli_sirius_config_zodiac_passatutto_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds86[@]}"; then _picocli_sirius_config_zodiac_passatutto_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds85[@]}"; then _picocli_sirius_config_zodiac_passatutto_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds84[@]}"; then _picocli_sirius_config_zodiac_passatutto_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds83[@]}"; then _picocli_sirius_config_zodiac_passatutto_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds82[@]}"; then _picocli_sirius_config_zodiac_passatutto_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds81[@]}"; then _picocli_sirius_config_zodiac_passatutto_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds80[@]}"; then _picocli_sirius_config_zodiac_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds79[@]}"; then _picocli_sirius_config_zodiac_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds78[@]}"; then _picocli_sirius_config_zodiac_passatutto; return $?; fi
  if CompWordsContainsArray "${cmds77[@]}"; then _picocli_sirius_config_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds76[@]}"; then _picocli_sirius_config_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds75[@]}"; then _picocli_sirius_config_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds74[@]}"; then _picocli_sirius_config_lcmsalign_formula_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds73[@]}"; then _picocli_sirius_config_lcmsalign_formula_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds72[@]}"; then _picocli_sirius_config_lcmsalign_formula_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds71[@]}"; then _picocli_sirius_config_lcmsalign_formula_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds70[@]}"; then _picocli_sirius_config_lcmsalign_formula_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds69[@]}"; then _picocli_sirius_config_lcmsalign_formula_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds68[@]}"; then _picocli_sirius_config_lcmsalign_formula_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds67[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds66[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds65[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds64[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds63[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds62[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds61[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds60[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds59[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds58[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds57[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds56[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds55[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds54[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds53[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds52[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds51[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds50[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds49[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto; return $?; fi
  if CompWordsContainsArray "${cmds48[@]}"; then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds47[@]}"; then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_structure_canopus_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds46[@]}"; then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_structure_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds45[@]}"; then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_structure_canopus; return $?; fi
  if CompWordsContainsArray "${cmds44[@]}"; then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds43[@]}"; then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_canopus; return $?; fi
  if CompWordsContainsArray "${cmds42[@]}"; then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_structure; return $?; fi
  if CompWordsContainsArray "${cmds41[@]}"; then _picocli_sirius_config_lcmsalign_formula_passatutto_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds40[@]}"; then _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds39[@]}"; then _picocli_sirius_config_lcmsalign_formula_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds38[@]}"; then _picocli_sirius_config_lcmsalign_formula_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds37[@]}"; then _picocli_sirius_config_lcmsalign_formula_zodiac; return $?; fi
  if CompWordsContainsArray "${cmds36[@]}"; then _picocli_sirius_config_lcmsalign_formula_passatutto; return $?; fi
  if CompWordsContainsArray "${cmds35[@]}"; then _picocli_sirius_config_lcmsalign_formula; return $?; fi
  if CompWordsContainsArray "${cmds34[@]}"; then _picocli_sirius_config_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds33[@]}"; then _picocli_sirius_config_generateAutocompletion; return $?; fi
  if CompWordsContainsArray "${cmds32[@]}"; then _picocli_sirius_config_login; return $?; fi
  if CompWordsContainsArray "${cmds31[@]}"; then _picocli_sirius_config_predictionexport; return $?; fi
  if CompWordsContainsArray "${cmds30[@]}"; then _picocli_sirius_config_ftreeexport; return $?; fi
  if CompWordsContainsArray "${cmds29[@]}"; then _picocli_sirius_config_mgfexport; return $?; fi
  if CompWordsContainsArray "${cmds28[@]}"; then _picocli_sirius_config_decomp; return $?; fi
  if CompWordsContainsArray "${cmds27[@]}"; then _picocli_sirius_config_similarity; return $?; fi
  if CompWordsContainsArray "${cmds26[@]}"; then _picocli_sirius_config_customdb; return $?; fi
  if CompWordsContainsArray "${cmds25[@]}"; then _picocli_sirius_config_projectspace; return $?; fi
  if CompWordsContainsArray "${cmds24[@]}"; then _picocli_sirius_config_passatutto; return $?; fi
  if CompWordsContainsArray "${cmds23[@]}"; then _picocli_sirius_config_formula; return $?; fi
  if CompWordsContainsArray "${cmds22[@]}"; then _picocli_sirius_config_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds21[@]}"; then _picocli_sirius_config_canopus; return $?; fi
  if CompWordsContainsArray "${cmds20[@]}"; then _picocli_sirius_config_zodiac; return $?; fi
  if CompWordsContainsArray "${cmds19[@]}"; then _picocli_sirius_config_structure; return $?; fi
  if CompWordsContainsArray "${cmds18[@]}"; then _picocli_sirius_config_lcmsalign; return $?; fi
  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_sirius_passatutto; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_sirius_formula; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_sirius_fingerprint; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_sirius_canopus; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_sirius_zodiac; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_sirius_structure; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_sirius_lcmsalign; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_sirius_writesummaries; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_sirius_generateAutocompletion; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_sirius_login; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_sirius_predictionexport; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_sirius_ftreeexport; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_sirius_mgfexport; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_sirius_decomp; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_sirius_similarity; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_sirius_customdb; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_sirius_projectspace; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_sirius_config; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_sirius; return $?;
}

# Generates completions for the options and subcommands of the `sirius` command.
function _picocli_sirius() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="config project-space custom-db similarity decomp mgf-export ftree-export prediction-export login generateAutocompletion write-summaries lcms-align structure zodiac canopus fingerprint formula passatutto"
  local flag_opts="--update-fingerprint-version --ignore-formula --allow-ms1-only --recompute --no-citations --noCitations --noCite -h --help -V --version"
  local arg_opts="--maxmz --output --project -o --naming-convention --input -i -z --parentmass --precursor --mz --ionization --adduct -f --formula -1 --ms1 -2 --ms2 --log --loglevel --cores --processors --compound-buffer --initial-compound-buffer"
  local logLevel_option_args="SEVERE WARNING INFO FINER ALL" # --loglevel values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --maxmz)
      return
      ;;
    --output|--project|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --naming-convention)
      return
      ;;
    --input|-i)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -z|--parentmass|--precursor|--mz)
      return
      ;;
    --ionization|--adduct)
      return
      ;;
    -f|--formula)
      return
      ;;
    -1|--ms1)
      return
      ;;
    -2|--ms2)
      return
      ;;
    --log|--loglevel)
      COMPREPLY=( $( compgen -W "${logLevel_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --cores|--processors)
      return
      ;;
    --compound-buffer|--initial-compound-buffer)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `config` subcommand.
function _picocli_sirius_config() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="lcms-align structure zodiac canopus fingerprint formula passatutto project-space custom-db similarity decomp mgf-export ftree-export prediction-export login generateAutocompletion write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="--IsotopeSettings.filter --ZodiacLibraryScoring.lambda --MS2MassDeviation.standardMassDeviation --CandidateFormulas --NumberOfStructureCandidates --NoiseThresholdSettings.absoluteThreshold --CompoundQuality --AlgorithmProfile --ZodiacRunInTwoSteps --MS2MassDeviation.allowedMassDeviation --IsotopeMs2Settings --InjectElGordoCompounds --NoiseThresholdSettings.basePeak --AdductSettings.fallback --PrintCitations --FormulaSettings.fallback --ZodiacEpochs.burnInPeriod --IsotopeSettings.multiplier --ZodiacEpochs.numberOfMarkovChains --Timeout.secondsPerTree --ZodiacLibraryScoring.minCosine --NoiseThresholdSettings.intensityThreshold --FormulaResultThreshold --PossibleAdductSwitches --AdductSettings.enforced --ZodiacEdgeFilterThresholds.minLocalConnections --NumberOfCandidatesPerIon --ZodiacEdgeFilterThresholds.thresholdFilter --FormulaResultRankingScore --MS1MassDeviation.allowedMassDeviation --ForbidRecalibration --NumberOfCandidates --ms1.absoluteIntensityError --ZodiacNumberOfConsideredCandidatesAt800Mz --MS1MassDeviation.massDifferenceDeviation --ZodiacEdgeFilterThresholds.minLocalCandidates --MotifDbFile --MedianNoiseIntensity --ms1.minimalIntensityToConsider --FormulaSettings.enforced --Timeout.secondsPerInstance --AdductSettings.detectable --RecomputeResults --ZodiacRatioOfConsideredCandidatesPerIonization --ZodiacNumberOfConsideredCandidatesAt300Mz --FormulaSearchDB --StructurePredictors --MS1MassDeviation.standardMassDeviation --StructureSearchDB --UseHeuristic.mzToUseHeuristicOnly --UseHeuristic.mzToUseHeuristic --NoiseThresholdSettings.maximalNumberOfPeaks --ZodiacClusterCompounds --FormulaSettings.detectable --ms1.relativeIntensityError --ZodiacEpochs.iterations"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --IsotopeSettings.filter)
      return
      ;;
    --ZodiacLibraryScoring.lambda)
      return
      ;;
    --MS2MassDeviation.standardMassDeviation)
      return
      ;;
    --CandidateFormulas)
      return
      ;;
    --NumberOfStructureCandidates)
      return
      ;;
    --NoiseThresholdSettings.absoluteThreshold)
      return
      ;;
    --CompoundQuality)
      return
      ;;
    --AlgorithmProfile)
      return
      ;;
    --ZodiacRunInTwoSteps)
      return
      ;;
    --MS2MassDeviation.allowedMassDeviation)
      return
      ;;
    --IsotopeMs2Settings)
      return
      ;;
    --InjectElGordoCompounds)
      return
      ;;
    --NoiseThresholdSettings.basePeak)
      return
      ;;
    --AdductSettings.fallback)
      return
      ;;
    --PrintCitations)
      return
      ;;
    --FormulaSettings.fallback)
      return
      ;;
    --ZodiacEpochs.burnInPeriod)
      return
      ;;
    --IsotopeSettings.multiplier)
      return
      ;;
    --ZodiacEpochs.numberOfMarkovChains)
      return
      ;;
    --Timeout.secondsPerTree)
      return
      ;;
    --ZodiacLibraryScoring.minCosine)
      return
      ;;
    --NoiseThresholdSettings.intensityThreshold)
      return
      ;;
    --FormulaResultThreshold)
      return
      ;;
    --PossibleAdductSwitches)
      return
      ;;
    --AdductSettings.enforced)
      return
      ;;
    --ZodiacEdgeFilterThresholds.minLocalConnections)
      return
      ;;
    --NumberOfCandidatesPerIon)
      return
      ;;
    --ZodiacEdgeFilterThresholds.thresholdFilter)
      return
      ;;
    --FormulaResultRankingScore)
      return
      ;;
    --MS1MassDeviation.allowedMassDeviation)
      return
      ;;
    --ForbidRecalibration)
      return
      ;;
    --NumberOfCandidates)
      return
      ;;
    --ms1.absoluteIntensityError)
      return
      ;;
    --ZodiacNumberOfConsideredCandidatesAt800Mz)
      return
      ;;
    --MS1MassDeviation.massDifferenceDeviation)
      return
      ;;
    --ZodiacEdgeFilterThresholds.minLocalCandidates)
      return
      ;;
    --MotifDbFile)
      return
      ;;
    --MedianNoiseIntensity)
      return
      ;;
    --ms1.minimalIntensityToConsider)
      return
      ;;
    --FormulaSettings.enforced)
      return
      ;;
    --Timeout.secondsPerInstance)
      return
      ;;
    --AdductSettings.detectable)
      return
      ;;
    --RecomputeResults)
      return
      ;;
    --ZodiacRatioOfConsideredCandidatesPerIonization)
      return
      ;;
    --ZodiacNumberOfConsideredCandidatesAt300Mz)
      return
      ;;
    --FormulaSearchDB)
      return
      ;;
    --StructurePredictors)
      return
      ;;
    --MS1MassDeviation.standardMassDeviation)
      return
      ;;
    --StructureSearchDB)
      return
      ;;
    --UseHeuristic.mzToUseHeuristicOnly)
      return
      ;;
    --UseHeuristic.mzToUseHeuristic)
      return
      ;;
    --NoiseThresholdSettings.maximalNumberOfPeaks)
      return
      ;;
    --ZodiacClusterCompounds)
      return
      ;;
    --FormulaSettings.detectable)
      return
      ;;
    --ms1.relativeIntensityError)
      return
      ;;
    --ZodiacEpochs.iterations)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `project-space` subcommand.
function _picocli_sirius_projectspace() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--move -m -h --help -V --version"
  local arg_opts="--merge-compounds-top --merge-compounds-cosine --split -s --count -c --split-order -o --keep-by-confidence --kc --merge-compounds-rtdiff --delete-by-idx --di -d --delete-by-name --dn --delete-by-mass --dm --keep-by-idx --ki -k --keep-by-mass --km --keep-by-name --kn --keep-by-tree-size --kts --keep-by-explained-intensity --kei"
  local type_option_args="NO NUMBER SIZE" # --split values
  local order_option_args="SHUFFLE MASS NAME" # --split-order values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --merge-compounds-top)
      return
      ;;
    --merge-compounds-cosine)
      return
      ;;
    --split|-s)
      COMPREPLY=( $( compgen -W "${type_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --count|-c)
      return
      ;;
    --split-order|-o)
      COMPREPLY=( $( compgen -W "${order_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --keep-by-confidence|--kc)
      return
      ;;
    --merge-compounds-rtdiff)
      return
      ;;
    --delete-by-idx|--di|-d)
      return
      ;;
    --delete-by-name|--dn)
      return
      ;;
    --delete-by-mass|--dm)
      return
      ;;
    --keep-by-idx|--ki|-k)
      return
      ;;
    --keep-by-mass|--km)
      return
      ;;
    --keep-by-name|--kn)
      return
      ;;
    --keep-by-tree-size|--kts)
      return
      ;;
    --keep-by-explained-intensity|--kei)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `custom-db` subcommand.
function _picocli_sirius_customdb() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--location --buffer-size --buffer --derive-from --compression -c"
  local parentDBs_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO TRAIN UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --derive-from values
  local compression_option_args="NONE GZIP XZ LZ4 BZIP2" # --compression values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --location)
      return
      ;;
    --buffer-size|--buffer)
      return
      ;;
    --derive-from)
      COMPREPLY=( $( compgen -W "${parentDBs_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --compression|-c)
      COMPREPLY=( $( compgen -W "${compression_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `similarity` subcommand.
function _picocli_sirius_similarity() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--ftalign --tanimoto --tanimoto-canopus --cosine --numpy --matrix -h --help -V --version"
  local arg_opts="--digits --precision -p --ftblast --minpeaks --directory -d"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --ftblast)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --minpeaks)
      return
      ;;
    --directory|-d)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `decomp` subcommand.
function _picocli_sirius_decomp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--nofilter -n --errors -r -h --help -V --version"
  local arg_opts="--ppm -p --abs -a --filter -f --parent --ion -i --max-decomps -d --mass -m --output -o --elements -e"
  local level_option_args="STRICT COMMON PERMISSIVE RDBE NONE" # --filter values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --ppm|-p)
      return
      ;;
    --abs|-a)
      return
      ;;
    --filter|-f)
      COMPREPLY=( $( compgen -W "${level_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --parent)
      return
      ;;
    --ion|-i)
      return
      ;;
    --max-decomps|-d)
      return
      ;;
    --mass|-m)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --elements|-e)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `mgf-export` subcommand.
function _picocli_sirius_mgfexport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--write-ms1 --merge-ms2 -h --help -V --version"
  local arg_opts="--quant-table --merge-ppm --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --quant-table)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --merge-ppm)
      return
      ;;
    --output|-o)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ftree-export` subcommand.
function _picocli_sirius_ftreeexport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--json --dot --all -h --help -V --version"
  local arg_opts="--output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `prediction-export` subcommand.
function _picocli_sirius_predictionexport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all -h --help -V --version"
  local arg_opts="--polarity --charge -c --digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --polarity|--charge|-c)
      return
      ;;
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `login` subcommand.
function _picocli_sirius_login() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--clear --show --license-info --limits -h --help -V --version"
  local arg_opts="--reset-password --select-license --select-subscription --user --email -u --password --pwd -p"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --reset-password)
      return
      ;;
    --select-license|--select-subscription)
      return
      ;;
    --user|--email|-u)
      return
      ;;
    --password|--pwd|-p)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `generateAutocompletion` subcommand.
function _picocli_sirius_generateAutocompletion() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lcms-align` subcommand.
function _picocli_sirius_lcmsalign() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="formula"
  local flag_opts="-h --help -V --version"
  local arg_opts="--workflow -w"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --workflow|-w)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `zodiac` subcommand.
function _picocli_sirius_zodiac() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="passatutto fingerprint write-summaries"
  local flag_opts="--ignore-spectra-quality -h --help -V --version"
  local arg_opts="--library-hits --considered-candidates-at-300 --considered-candidates-at-800 --min-cosine --lambda --iterations --burn-in --thresholdFilter --minLocalConnections"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --library-hits)
      return
      ;;
    --considered-candidates-at-300)
      return
      ;;
    --considered-candidates-at-800)
      return
      ;;
    --min-cosine)
      return
      ;;
    --lambda)
      return
      ;;
    --iterations)
      return
      ;;
    --burn-in)
      return
      ;;
    --thresholdFilter)
      return
      ;;
    --minLocalConnections)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `formula` subcommand.
function _picocli_sirius_formula() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="passatutto zodiac fingerprint write-summaries"
  local flag_opts="--no-recalibration --no-isotope-filter --no-isotope-score -h --help -V --version"
  local arg_opts="--solver --ilp-solver --heuristic -I --ions-enforced --database -d --db --ppm-max --ppm-max-ms2 --tree-timeout --compound-timeout -p --profile -c --candidates --candidates-per-ion -e --elements-considered -E --elements-enforced -f --formulas -i --ions-considered --heuristic-only"
  local solver_option_args="GUROBI CPLEX GLPK CLP" # --ilp-solver values
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --solver|--ilp-solver)
      COMPREPLY=( $( compgen -W "${solver_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --heuristic)
      return
      ;;
    -I|--ions-enforced)
      return
      ;;
    --database|-d|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --ppm-max)
      return
      ;;
    --ppm-max-ms2)
      return
      ;;
    --tree-timeout)
      return
      ;;
    --compound-timeout)
      return
      ;;
    -p|--profile)
      return
      ;;
    -c|--candidates)
      return
      ;;
    --candidates-per-ion)
      return
      ;;
    -e|--elements-considered)
      return
      ;;
    -E|--elements-enforced)
      return
      ;;
    -f|--formulas)
      return
      ;;
    -i|--ions-considered)
      return
      ;;
    --heuristic-only)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `passatutto` subcommand.
function _picocli_sirius_passatutto() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="fingerprint write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lcms-align` subcommand.
function _picocli_sirius_config_lcmsalign() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="formula"
  local flag_opts="-h --help -V --version"
  local arg_opts="--workflow -w"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --workflow|-w)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_config_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `zodiac` subcommand.
function _picocli_sirius_config_zodiac() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="passatutto fingerprint write-summaries"
  local flag_opts="--ignore-spectra-quality -h --help -V --version"
  local arg_opts="--library-hits --considered-candidates-at-300 --considered-candidates-at-800 --min-cosine --lambda --iterations --burn-in --thresholdFilter --minLocalConnections"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --library-hits)
      return
      ;;
    --considered-candidates-at-300)
      return
      ;;
    --considered-candidates-at-800)
      return
      ;;
    --min-cosine)
      return
      ;;
    --lambda)
      return
      ;;
    --iterations)
      return
      ;;
    --burn-in)
      return
      ;;
    --thresholdFilter)
      return
      ;;
    --minLocalConnections)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_config_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `formula` subcommand.
function _picocli_sirius_config_formula() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="passatutto zodiac fingerprint write-summaries"
  local flag_opts="--no-recalibration --no-isotope-filter --no-isotope-score -h --help -V --version"
  local arg_opts="--solver --ilp-solver --heuristic -I --ions-enforced --database -d --db --ppm-max --ppm-max-ms2 --tree-timeout --compound-timeout -p --profile -c --candidates --candidates-per-ion -e --elements-considered -E --elements-enforced -f --formulas -i --ions-considered --heuristic-only"
  local solver_option_args="GUROBI CPLEX GLPK CLP" # --ilp-solver values
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --solver|--ilp-solver)
      COMPREPLY=( $( compgen -W "${solver_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --heuristic)
      return
      ;;
    -I|--ions-enforced)
      return
      ;;
    --database|-d|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --ppm-max)
      return
      ;;
    --ppm-max-ms2)
      return
      ;;
    --tree-timeout)
      return
      ;;
    --compound-timeout)
      return
      ;;
    -p|--profile)
      return
      ;;
    -c|--candidates)
      return
      ;;
    --candidates-per-ion)
      return
      ;;
    -e|--elements-considered)
      return
      ;;
    -E|--elements-enforced)
      return
      ;;
    -f|--formulas)
      return
      ;;
    -i|--ions-considered)
      return
      ;;
    --heuristic-only)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `passatutto` subcommand.
function _picocli_sirius_config_passatutto() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="fingerprint write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `project-space` subcommand.
function _picocli_sirius_config_projectspace() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--move -m -h --help -V --version"
  local arg_opts="--merge-compounds-top --merge-compounds-cosine --split -s --count -c --split-order -o --keep-by-confidence --kc --merge-compounds-rtdiff --delete-by-idx --di -d --delete-by-name --dn --delete-by-mass --dm --keep-by-idx --ki -k --keep-by-mass --km --keep-by-name --kn --keep-by-tree-size --kts --keep-by-explained-intensity --kei"
  local type_option_args="NO NUMBER SIZE" # --split values
  local order_option_args="SHUFFLE MASS NAME" # --split-order values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --merge-compounds-top)
      return
      ;;
    --merge-compounds-cosine)
      return
      ;;
    --split|-s)
      COMPREPLY=( $( compgen -W "${type_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --count|-c)
      return
      ;;
    --split-order|-o)
      COMPREPLY=( $( compgen -W "${order_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --keep-by-confidence|--kc)
      return
      ;;
    --merge-compounds-rtdiff)
      return
      ;;
    --delete-by-idx|--di|-d)
      return
      ;;
    --delete-by-name|--dn)
      return
      ;;
    --delete-by-mass|--dm)
      return
      ;;
    --keep-by-idx|--ki|-k)
      return
      ;;
    --keep-by-mass|--km)
      return
      ;;
    --keep-by-name|--kn)
      return
      ;;
    --keep-by-tree-size|--kts)
      return
      ;;
    --keep-by-explained-intensity|--kei)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `custom-db` subcommand.
function _picocli_sirius_config_customdb() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--location --buffer-size --buffer --derive-from --compression -c"
  local parentDBs_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO TRAIN UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --derive-from values
  local compression_option_args="NONE GZIP XZ LZ4 BZIP2" # --compression values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --location)
      return
      ;;
    --buffer-size|--buffer)
      return
      ;;
    --derive-from)
      COMPREPLY=( $( compgen -W "${parentDBs_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --compression|-c)
      COMPREPLY=( $( compgen -W "${compression_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `similarity` subcommand.
function _picocli_sirius_config_similarity() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--ftalign --tanimoto --tanimoto-canopus --cosine --numpy --matrix -h --help -V --version"
  local arg_opts="--digits --precision -p --ftblast --minpeaks --directory -d"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --ftblast)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --minpeaks)
      return
      ;;
    --directory|-d)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `decomp` subcommand.
function _picocli_sirius_config_decomp() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--nofilter -n --errors -r -h --help -V --version"
  local arg_opts="--ppm -p --abs -a --filter -f --parent --ion -i --max-decomps -d --mass -m --output -o --elements -e"
  local level_option_args="STRICT COMMON PERMISSIVE RDBE NONE" # --filter values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --ppm|-p)
      return
      ;;
    --abs|-a)
      return
      ;;
    --filter|-f)
      COMPREPLY=( $( compgen -W "${level_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --parent)
      return
      ;;
    --ion|-i)
      return
      ;;
    --max-decomps|-d)
      return
      ;;
    --mass|-m)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --elements|-e)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `mgf-export` subcommand.
function _picocli_sirius_config_mgfexport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--write-ms1 --merge-ms2 -h --help -V --version"
  local arg_opts="--quant-table --merge-ppm --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --quant-table)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --merge-ppm)
      return
      ;;
    --output|-o)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ftree-export` subcommand.
function _picocli_sirius_config_ftreeexport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--json --dot --all -h --help -V --version"
  local arg_opts="--output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `prediction-export` subcommand.
function _picocli_sirius_config_predictionexport() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all -h --help -V --version"
  local arg_opts="--polarity --charge -c --digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --polarity|--charge|-c)
      return
      ;;
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `login` subcommand.
function _picocli_sirius_config_login() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--clear --show --license-info --limits -h --help -V --version"
  local arg_opts="--reset-password --select-license --select-subscription --user --email -u --password --pwd -p"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --reset-password)
      return
      ;;
    --select-license|--select-subscription)
      return
      ;;
    --user|--email|-u)
      return
      ;;
    --password|--pwd|-p)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `generateAutocompletion` subcommand.
function _picocli_sirius_config_generateAutocompletion() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `formula` subcommand.
function _picocli_sirius_config_lcmsalign_formula() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="passatutto zodiac fingerprint write-summaries"
  local flag_opts="--no-recalibration --no-isotope-filter --no-isotope-score -h --help -V --version"
  local arg_opts="--solver --ilp-solver --heuristic -I --ions-enforced --database -d --db --ppm-max --ppm-max-ms2 --tree-timeout --compound-timeout -p --profile -c --candidates --candidates-per-ion -e --elements-considered -E --elements-enforced -f --formulas -i --ions-considered --heuristic-only"
  local solver_option_args="GUROBI CPLEX GLPK CLP" # --ilp-solver values
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --solver|--ilp-solver)
      COMPREPLY=( $( compgen -W "${solver_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --heuristic)
      return
      ;;
    -I|--ions-enforced)
      return
      ;;
    --database|-d|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --ppm-max)
      return
      ;;
    --ppm-max-ms2)
      return
      ;;
    --tree-timeout)
      return
      ;;
    --compound-timeout)
      return
      ;;
    -p|--profile)
      return
      ;;
    -c|--candidates)
      return
      ;;
    --candidates-per-ion)
      return
      ;;
    -e|--elements-considered)
      return
      ;;
    -E|--elements-enforced)
      return
      ;;
    -f|--formulas)
      return
      ;;
    -i|--ions-considered)
      return
      ;;
    --heuristic-only)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `passatutto` subcommand.
function _picocli_sirius_config_lcmsalign_formula_passatutto() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="fingerprint write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `zodiac` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="passatutto fingerprint write-summaries"
  local flag_opts="--ignore-spectra-quality -h --help -V --version"
  local arg_opts="--library-hits --considered-candidates-at-300 --considered-candidates-at-800 --min-cosine --lambda --iterations --burn-in --thresholdFilter --minLocalConnections"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --library-hits)
      return
      ;;
    --considered-candidates-at-300)
      return
      ;;
    --considered-candidates-at-800)
      return
      ;;
    --min-cosine)
      return
      ;;
    --lambda)
      return
      ;;
    --iterations)
      return
      ;;
    --burn-in)
      return
      ;;
    --thresholdFilter)
      return
      ;;
    --minLocalConnections)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_config_lcmsalign_formula_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_passatutto_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_passatutto_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `passatutto` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="fingerprint write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_passatutto_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_zodiac_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_config_lcmsalign_formula_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_lcmsalign_formula_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_lcmsalign_formula_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_lcmsalign_formula_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `passatutto` subcommand.
function _picocli_sirius_config_zodiac_passatutto() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="fingerprint write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_config_zodiac_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_zodiac_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_config_zodiac_passatutto_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_zodiac_passatutto_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_config_zodiac_passatutto_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_zodiac_passatutto_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_zodiac_passatutto_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_zodiac_passatutto_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_zodiac_passatutto_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_zodiac_passatutto_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_zodiac_passatutto_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_config_zodiac_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_zodiac_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_zodiac_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_zodiac_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_zodiac_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_zodiac_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_zodiac_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_config_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `passatutto` subcommand.
function _picocli_sirius_config_formula_passatutto() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="fingerprint write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `zodiac` subcommand.
function _picocli_sirius_config_formula_zodiac() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="passatutto fingerprint write-summaries"
  local flag_opts="--ignore-spectra-quality -h --help -V --version"
  local arg_opts="--library-hits --considered-candidates-at-300 --considered-candidates-at-800 --min-cosine --lambda --iterations --burn-in --thresholdFilter --minLocalConnections"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --library-hits)
      return
      ;;
    --considered-candidates-at-300)
      return
      ;;
    --considered-candidates-at-800)
      return
      ;;
    --min-cosine)
      return
      ;;
    --lambda)
      return
      ;;
    --iterations)
      return
      ;;
    --burn-in)
      return
      ;;
    --thresholdFilter)
      return
      ;;
    --minLocalConnections)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_config_formula_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_config_formula_passatutto_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_passatutto_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_config_formula_passatutto_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_formula_passatutto_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_passatutto_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_formula_passatutto_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_passatutto_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_passatutto_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_passatutto_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `passatutto` subcommand.
function _picocli_sirius_config_formula_zodiac_passatutto() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="fingerprint write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_config_formula_zodiac_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_zodiac_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_config_formula_zodiac_passatutto_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_zodiac_passatutto_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_zodiac_passatutto_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_config_formula_zodiac_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_formula_zodiac_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_zodiac_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_formula_zodiac_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_zodiac_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_zodiac_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_zodiac_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_config_formula_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_formula_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_formula_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_formula_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_config_passatutto_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_passatutto_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_config_passatutto_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_passatutto_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_passatutto_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_config_passatutto_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_passatutto_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_passatutto_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_config_passatutto_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `formula` subcommand.
function _picocli_sirius_lcmsalign_formula() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="passatutto zodiac fingerprint write-summaries"
  local flag_opts="--no-recalibration --no-isotope-filter --no-isotope-score -h --help -V --version"
  local arg_opts="--solver --ilp-solver --heuristic -I --ions-enforced --database -d --db --ppm-max --ppm-max-ms2 --tree-timeout --compound-timeout -p --profile -c --candidates --candidates-per-ion -e --elements-considered -E --elements-enforced -f --formulas -i --ions-considered --heuristic-only"
  local solver_option_args="GUROBI CPLEX GLPK CLP" # --ilp-solver values
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --solver|--ilp-solver)
      COMPREPLY=( $( compgen -W "${solver_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --heuristic)
      return
      ;;
    -I|--ions-enforced)
      return
      ;;
    --database|-d|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --ppm-max)
      return
      ;;
    --ppm-max-ms2)
      return
      ;;
    --tree-timeout)
      return
      ;;
    --compound-timeout)
      return
      ;;
    -p|--profile)
      return
      ;;
    -c|--candidates)
      return
      ;;
    --candidates-per-ion)
      return
      ;;
    -e|--elements-considered)
      return
      ;;
    -E|--elements-enforced)
      return
      ;;
    -f|--formulas)
      return
      ;;
    -i|--ions-considered)
      return
      ;;
    --heuristic-only)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `passatutto` subcommand.
function _picocli_sirius_lcmsalign_formula_passatutto() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="fingerprint write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `zodiac` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="passatutto fingerprint write-summaries"
  local flag_opts="--ignore-spectra-quality -h --help -V --version"
  local arg_opts="--library-hits --considered-candidates-at-300 --considered-candidates-at-800 --min-cosine --lambda --iterations --burn-in --thresholdFilter --minLocalConnections"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --library-hits)
      return
      ;;
    --considered-candidates-at-300)
      return
      ;;
    --considered-candidates-at-800)
      return
      ;;
    --min-cosine)
      return
      ;;
    --lambda)
      return
      ;;
    --iterations)
      return
      ;;
    --burn-in)
      return
      ;;
    --thresholdFilter)
      return
      ;;
    --minLocalConnections)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_lcmsalign_formula_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_lcmsalign_formula_passatutto_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_passatutto_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_passatutto_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `passatutto` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_passatutto() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="fingerprint write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_passatutto_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_passatutto_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_zodiac_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_lcmsalign_formula_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_lcmsalign_formula_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_lcmsalign_formula_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_lcmsalign_formula_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `passatutto` subcommand.
function _picocli_sirius_zodiac_passatutto() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="fingerprint write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_zodiac_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_zodiac_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_zodiac_passatutto_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_zodiac_passatutto_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_zodiac_passatutto_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_zodiac_passatutto_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_zodiac_passatutto_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_zodiac_passatutto_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_zodiac_passatutto_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_zodiac_passatutto_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_zodiac_passatutto_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_zodiac_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_zodiac_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_zodiac_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_zodiac_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_zodiac_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_zodiac_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_zodiac_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `passatutto` subcommand.
function _picocli_sirius_formula_passatutto() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="fingerprint write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `zodiac` subcommand.
function _picocli_sirius_formula_zodiac() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="passatutto fingerprint write-summaries"
  local flag_opts="--ignore-spectra-quality -h --help -V --version"
  local arg_opts="--library-hits --considered-candidates-at-300 --considered-candidates-at-800 --min-cosine --lambda --iterations --burn-in --thresholdFilter --minLocalConnections"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --library-hits)
      return
      ;;
    --considered-candidates-at-300)
      return
      ;;
    --considered-candidates-at-800)
      return
      ;;
    --min-cosine)
      return
      ;;
    --lambda)
      return
      ;;
    --iterations)
      return
      ;;
    --burn-in)
      return
      ;;
    --thresholdFilter)
      return
      ;;
    --minLocalConnections)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_formula_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_formula_passatutto_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_passatutto_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_formula_passatutto_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_formula_passatutto_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_passatutto_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_formula_passatutto_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_passatutto_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_passatutto_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_passatutto_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `passatutto` subcommand.
function _picocli_sirius_formula_zodiac_passatutto() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="fingerprint write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_formula_zodiac_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_zodiac_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_formula_zodiac_passatutto_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_zodiac_passatutto_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_formula_zodiac_passatutto_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_formula_zodiac_passatutto_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_zodiac_passatutto_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_formula_zodiac_passatutto_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_zodiac_passatutto_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_zodiac_passatutto_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_zodiac_passatutto_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_formula_zodiac_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_formula_zodiac_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_zodiac_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_formula_zodiac_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_zodiac_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_zodiac_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_zodiac_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_formula_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_formula_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_formula_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_formula_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fingerprint` subcommand.
function _picocli_sirius_passatutto_fingerprint() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="structure canopus write-summaries"
  local flag_opts="--no-threshold -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_passatutto_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `structure` subcommand.
function _picocli_sirius_passatutto_fingerprint_structure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="canopus write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts="-d --database --db -l flag-lipids --elgordo"
  local dbNamedbName_option_args="ALL ALL_BUT_INSILICO PUBCHEM MESH HMDB KNAPSACK CHEBI PUBMED BIO KEGG HSDB MACONDA METACYC GNPS ZINCBIO UNDP YMDB PLANTCYC NORMAN ADDITIONAL SUPERNATURAL COCONUT PUBCHEMANNOTATIONBIO PUBCHEMANNOTATIONDRUG PUBCHEMANNOTATIONSAFETYANDTOXIC PUBCHEMANNOTATIONFOOD LIPID KEGGMINE ECOCYCMINE YMDBMINE" # --database values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--database|--db)
      COMPREPLY=( $( compgen -W "${dbNamedbName_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    -l|flag-lipids|--elgordo)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_passatutto_fingerprint_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_passatutto_fingerprint_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `canopus` subcommand.
function _picocli_sirius_passatutto_fingerprint_structure_canopus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="write-summaries"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_passatutto_fingerprint_structure_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_passatutto_fingerprint_structure_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `write-summaries` subcommand.
function _picocli_sirius_passatutto_fingerprint_canopus_writesummaries() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--classyfire --npc --fingerprints --fingerprint --pubchem --maccs --all --compress --zip -c -h --help -V --version"
  local arg_opts="--digits --precision -p --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --digits|--precision|-p)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `sirius`, `sirius.sh`, and `sirius.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_sirius` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_sirius -o default sirius sirius.sh sirius.bash
