import org.gradle.api.internal.file.copy.CopyAction
import org.gradle.api.internal.file.copy.FileCopyAction

import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'edu.sc.seis.gradle:launch4j:2.4.4'
//        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
//        classpath 'org.apache.commons:commons-configuration2:2.4'
        classpath 'commons-configuration:commons-configuration:1.10'
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.9.3"
}

//Global Properties
ext {
    //version for external libraries
    slf4j_version = '1.7.25'
    jjobs_version = '0.9.11-SNAPSHOT'
    json_version = '1.0' //todo move to gson
    json_impl_version = "1.0.4" //todo move to gson

    glpk_lib_version = '4.60'
    cdk_version = "2.1.1"

    jewelcli_version = '0.8.9'
    picocli_version = '3.9.5'

    //locations of runtime libraries
    runtimeClasspath = '${GUROBI_HOME}/lib/gurobi.jar:${CPLEX_HOME}/lib/cplex.jar'
    libExclude = ['gurobi-*.jar', 'cplex-*.jar']

//    commons_email_version = '1.4'
    oshi_version = '3.13.0'

    error_reporter_version = "0.9.2"
    jetbrains_version = "17.0.0"

    logger.lifecycle('reading gradle properties file...')
    File propertiesFile = Paths.get(System.properties['user.home'], 'gradle.properties').toFile()
    getLogger().lifecycle("Loading properties from ${propertiesFile.absolutePath}")
    Properties props = new Properties()

    propertiesFile.withReader("UTF8", {
        props.load(it)
    })
    System.properties.putAll(props)

    logger.lifecycle('reading build properties file...')
    props = new Properties()
    File propertiesFileIn = new File("${projectDir}/sirius_cli/src/main/resources/sirius_frontend.build.properties")
    propertiesFileIn.withReader("UTF8", {
        props.load(it)
    })
    System.properties.putAll(props)

    // edit all these versions in sirius_cli/src/main/resources/....build.properties
    appName = System.properties.getProperty('de.unijena.bioinf.utils.errorReport.softwareName').toLowerCase()
    buildNumber = System.properties.getProperty('de.unijena.bioinf.sirius.build')
    println(buildNumber)
    siriusVersion = System.properties.getProperty('de.unijena.bioinf.sirius.version')
    fingeridVersion = System.properties.getProperty('de.unijena.bioinf.fingerid.version')
    mztabm_version = System.properties.getProperty('de.unijena.bioinf.mztabm.version')
}

/*################### DISTRIBUTION STUFF ################### */
project.ext.set("linSuffix", "linux")
project.ext.set("winSuffix", "win")
project.ext.set("macSuffix", "osx")
project.ext.set("arch", ['64','32'])
project.ext.set("manualPath", file('manual').absolutePath)
project.ext.set("distPath", file('dist').absolutePath)



allprojects {
    apply plugin: "com.jfrog.artifactory"
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    sourceCompatibility = 11
    targetCompatibility = 11


    version = "$siriusVersion"
    group = 'de.unijena.bioinf.ms'

    repositories {
        mavenLocal()
        mavenCentral()
        maven {//public libs only so anybody can build the frontend without login
            url "https://bio.informatik.uni-jena.de/repository/libs-oss"
        }
        maven {
            url "http://www.ebi.ac.uk/Tools/maven/repos/content/groups/ebi-repo/"
        }
        maven {
            url "https://www.xypron.de/repository" //glpk repo
        }
        maven {
            url "http://repo1.maven.org/maven2/" //glazed lists
        }

    }

    dependencies {
        annotationProcessor "de.unijena.bioinf.ms:processor:$siriusVersion"
        compile 'net.sf.trove4j:core:3.1.0' //switched from 'net.sf.trove4j:trove4j:3.0.3' which seems to be buggy and no longer supported
        compile group: 'com.google.guava', name: 'guava', version: '28.1-jre'
        compile "org.jetbrains:annotations:$jetbrains_version"
        compile group: 'com.github.oshi', name: 'oshi-core', version: "$oshi_version"


        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

    sourceSets {
        main {
            resources {
                srcDirs "src/main/resources", "configs"
            }
        }
    }

    task cleanConfig {
        group = 'build'
        doLast {
            def f = file("${projectDir}/configs")
            if (f.exists())
                f.deleteDir()
        }
    }
    clean.dependsOn cleanConfig
}

task downloadGLPK(type: Copy) {
    def glpkURL = new URL("https://bio.informatik.uni-jena.de/repository/list/dist-release-local/de/unijena/bioinf/glpk/glpk-${project.glpk_lib_version}.zip")
    project.ext.set("glpkPath", getBuildDir().toPath().resolve('tmp/glpk/').toFile())

    Path dir = project.glpkPath.toPath().getParent()
    if (!dir.resolve('glpk').toFile().exists()) {
        copy {
            println(dir.toString())
            dir.resolve('glpk').toFile().deleteDir()
            Files.createDirectories(dir)

            def glpkZipFile = Paths.get('glpk.zip')
            def file = dir.resolve(glpkZipFile).newOutputStream()
            file << glpkURL.openStream()
            file.close()

            from zipTree(dir.resolve(glpkZipFile).toFile())
            into dir.toFile()
        }
    }
}

/*################### Building the Documentation ################### */


task cleanDoku {
    group = 'documentation'
    doLast {
        def f = file("${project.manualPath}/build")
        if (f.exists())
            f.deleteDir()
    }
}
clean.dependsOn cleanDoku

task htmlDoku(type: Exec) {
    group = 'documentation'
    workingDir = file("${project.manualPath}/source")
    outputs.file("${project.manualPath}/build/html")
    outputs.upToDateWhen { return false }
    commandLine(['latex2html', '-rootdir', '../build/html', '-mkdir', 'SIRIUS'])

    doFirst {
        Files.createDirectories(Paths.get("${project.manualPath}/build"))
    }
}
htmlDoku.mustRunAfter cleanDoku

//colleact files for docu and readme
task createVersion {
    doFirst {
        Path out = Paths.get("${project.manualPath}", "/source/version.txt")
        if (Files.isReadable(out)) {
            if (project.version.toString().equals(Files.readAllLines(out).first().toString())) {
                getLogger().lifecycle("Version file already up to date")
                return
            }
        }
        getLogger().lifecycle("Updating version file")
        Files.deleteIfExists(out)
        Files.write(out, Arrays.asList("${project.version}"), StandardOpenOption.CREATE)
    }
}

task createChangelogTex(type: Exec) {
    group = 'documentation'
    inputs.file("${project.rootDir}/CHANGELOG.md")
    outputs.file("${project.manualPath}/build/changelog.tex")
    commandLine(["pandoc", "${inputs.files.singleFile}", "-t", "latex", "-o", "${outputs.files.singleFile}"])

    doFirst {
        Files.createDirectories(Paths.get("${project.manualPath}/build"))
    }
}

task createFAQTex(type: Exec) {
    group = 'documentation'
    inputs.file("${project.rootDir}/FAQ.md")
    outputs.file("${project.manualPath}/build/faq.tex")
    commandLine(["pandoc", "${inputs.files.singleFile}", "-t", "latex", "-o", "${outputs.files.singleFile}"])

    doFirst {
        Files.createDirectories(Paths.get("${project.manualPath}/build"))
    }
}


task pdfDoku(type: Exec) {
    group = 'documentation'
    workingDir = file("${project.manualPath}/source")
    outputs.file(file("${project.manualPath}/build/SIRIUS.pdf"))

    outputs.upToDateWhen {
        File out = outputs.files.singleFile
        if (Files.notExists(out.toPath()))
            return false;
        long time = out.lastModified()

        boolean uptodate = true;
        workingDir.eachFileRecurse { file ->
            if (file.lastModified() >= time) {
                getLogger().lifecycle("${file.getName()} - ${file.lastModified()} is newer than the pdf -> rebuild needed")
                println()
                uptodate = false
            }
        }
        return uptodate
    }

    doFirst {
        Files.createDirectories(Paths.get("${project.manualPath}/build"))
    }

    commandLine 'bash', '-e', '-c', """
        pdflatex -output-directory ../build ./SIRIUS
        biber -output-directory ../build SIRIUS
        pdflatex -output-directory ../build ./SIRIUS
        pdflatex -output-directory ../build ./SIRIUS
    """
}
pdfDoku.dependsOn createVersion
pdfDoku.dependsOn createChangelogTex
pdfDoku.dependsOn createFAQTex
pdfDoku.mustRunAfter cleanDoku

class Pdf extends AbstractArchiveTask {
    public static final String PDF_EXTENSION = "pdf";

    Pdf() {
        setExtension(PDF_EXTENSION);
    }

    void source(File sourceFile) {
        from(sourceFile.toPath().getParent().toFile())
        include(sourceFile.getName())
        rename(sourceFile.getName(), getArchiveName())
    }

    @Override
    protected CopyAction createCopyAction() {
        return new FileCopyAction(getFileLookup().getFileResolver(getArchivePath().toPath().getParent().toFile()))
    }
}

task pdfDokuArtifact(type: Pdf) {
    group = 'documentation'
    baseName = project.appName
    classifier = 'manual'

    File input = pdfDoku.outputs.files.singleFile;

    outputs.upToDateWhen {
        File out = outputs.files.singleFile
        return Files.isRegularFile(out.toPath()) && out.lastModified() > input.lastModified()
    }

    source input

    project.ext.set("pdfManualPath", outputs.files.singleFile)
}

pdfDokuArtifact.dependsOn pdfDoku

task buildDoku {
    group = 'documentation'
    outputs.files(pdfDokuArtifact.outputs.files)
//    outputs.files(singleFile,htmlDoku.outputs.files)
}

buildDoku.mustRunAfter cleanDoku
buildDoku.dependsOn /*htmlDoku,*/ pdfDokuArtifact //todo solve problem and re enable


subprojects {
    apply plugin: 'application'
    apply plugin: 'edu.sc.seis.launch4j'

    /*################### Windows release Stuff ################### */
    launch4j {

        icon = getRootProject().getRootDir().toPath().resolve('dist/sirius.ico').toFile()
        copyright = "Chair of Bioinformatics, Friedrich-Schiller-University Jena."
        companyName = "Friedrich-Schiller-University Jena"
        version = project.version
        textVersion = project.version
        supportUrl = "https://bio.informatik.uni-jena.de/software/sirius/"

        initialHeapPercent = 50
        maxHeapPercent = 80

        dontWrapJar = true
        jdkPreference = "preferJre"

        classpath.add('./lib/*')
        classpath.addAll(runtimeClasspath.replace('${', '%').replaceAll('}', '%').split(':'))
        println(classpath)
    }

    /*################### Linux release Stuff ################### */
    startScripts {
        applicationName = "${project.appName}"
        def siriusLibPath = '$GUROBI_HOME/lib:$CPLEX_HOME/bin/x86-64_linux:$CPLEX_HOME/bin/x86-64_osx:$CPLEX_HOME/bin/x64_win64:$CPLEX_HOME/bin/x86_win32:$APP_HOME/lib'

//        defaultJvmOpts = ["-Djava.library.path=\\\"${siriusLibPath}\\\" -XX:+UseG1GC -XX:+UseStringDeduplication"]
        doLast {
            def lines = unixScript.text.split(System.lineSeparator())
            int insertIndex = -1
            for (int i = 0; i < lines.length; i++) {
                if (lines[i].startsWith('CLASSPATH=')) {
                    lines[i] = lines[i].replace('CLASSPATH=', "CLASSPATH=\"${runtimeClasspath}:") + '"'
                }
                if (lines[i].startsWith('DEFAULT_JVM_OPTS=""')) {
                    insertIndex = i - 1
                    lines[i] = lines[i].replace('DEFAULT_JVM_OPTS=""', "DEFAULT_JVM_OPTS=\"-Djava.library.path=\\\"${siriusLibPath}\\\" -XX:+UseG1GC -XX:+UseStringDeduplication\"")
                }
            }
            lines = (lines as List).plus(insertIndex, "export LD_LIBRARY_PATH=\"${siriusLibPath}:\$LD_LIBRARY_PATH\"")
            lines = (lines as List).plus(insertIndex + 1, "export DYLD_LIBRARY_PATH=\"\$LD_LIBRARY_PATH\"")
            unixScript.text = lines.join(System.lineSeparator())
        }
    }
}



task sourceJar(type: Jar) {
    group = 'build'
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    group = 'documentation'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def javaProjects() {
    subprojects.findAll {new File(it.projectDir, 'src').directory }
}

allprojects{
    configure(javaProjects()) {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    if (version.toString().endsWith('-SNAPSHOT'))
                        setArtifacts([jar, sourceJar])
                    else
                        setArtifacts([jar, sourceJar, javadocJar])
                }
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from project.components.java
                //adding submodules to pom
                pom.withXml {
                    if (!project.subprojects.isEmpty()) {
                        def modlules = asNode().appendNode('modules', '')
                        project.subprojects.each {
                            new Node(modlules, 'module', it.name)
                        }
                    }
                }
                setArtifacts([])
            }
            sirius(MavenPublication) {
                artifactId = "$name"
                groupId = "$group"

                pom.withXml {}
                artifact source: pdfDokuArtifact
            }
            manual(MavenPublication) {
                artifactId = "manual"
                groupId = "${group}.${project.appName}"
                version = 'current'

                pom.withXml {}
                artifact source: pdfDokuArtifact, classifier: 'sirius'
            }
        }
    }
}

task refreshDownloadLinks {
    project.ext.set("webPath", getBuildDir().toPath().resolve('tmp/webSite/').toFile())
    group = 'publishing'
    File outfile = file("${project.webPath}/sirius-download.md")
    outputs.file(outfile)

    doLast {
        Files.createDirectories(Paths.get("${project.webPath}"))
        def repoKey = "${project.version.toString().endsWith('-SNAPSHOT') ? 'dist-snapshot-local' : 'dist-release-local'}"

        List<String> lines = [
                "### Documentation",
                "- [SIRIUS Training material](https://bio.informatik.uni-jena.de/sirius-training/)",
                "- [SIRIUS manual](https://bio.informatik.uni-jena.de/repository/${repoKey}/de/unijena/bioinf/ms/sirius/${version}/sirius-${version}-manual.pdf)",
                "- [demo data](https://bio.informatik.uni-jena.de/wp/wp-content/uploads/2015/05/demo.zip)",
                "",
                "### SIRIUS+CSI:FingerID GUI and CLI - Version $version (Build ${project.buildNumber} from ${new Date().format('yyyy-MM-dd')})",
                "- for Windows [32bit](https://bio.informatik.uni-jena.de/repository/${repoKey}/de/unijena/bioinf/ms/sirius/$version/sirius-$version-win32.zip) / " +
                        "[64bit](https://bio.informatik.uni-jena.de/repository/${repoKey}/de/unijena/bioinf/ms/sirius/$version/sirius-$version-win64.zip)",
                "- for Linux [32bit](https://bio.informatik.uni-jena.de/repository/${repoKey}/de/unijena/bioinf/ms/sirius/$version/sirius-$version-linux32.zip) / " +
                        "[64bit](https://bio.informatik.uni-jena.de/repository/${repoKey}/de/unijena/bioinf/ms/sirius/$version/sirius-$version-linux64.zip)",
                "- for Mac [64bit](https://bio.informatik.uni-jena.de/repository/${repoKey}/de/unijena/bioinf/ms/sirius/$version/sirius-$version-osx64.zip)",
                "",
                "### SIRIUS+CSI:FingerID Commandline only - Version $version (Build ${project.buildNumber} from ${new Date().format('yyyy-MM-dd')})",
                "- for Windows [32bit](https://bio.informatik.uni-jena.de/repository/${repoKey}/de/unijena/bioinf/ms/sirius/$version/sirius-$version-win32-headless.zip) / " +
                        "[64bit](https://bio.informatik.uni-jena.de/repository/${repoKey}/de/unijena/bioinf/ms/sirius/$version/sirius-$version-win64-headless.zip)",
                "- for Linux [32bit](https://bio.informatik.uni-jena.de/repository/${repoKey}/de/unijena/bioinf/ms/sirius/$version/sirius-$version-linux32-headless.zip) / " +
                        "[64bit](https://bio.informatik.uni-jena.de/repository/${repoKey}/de/unijena/bioinf/ms/sirius/$version/sirius-$version-linux64-headless.zip)",
                "- for Mac [64bit](https://bio.informatik.uni-jena.de/repository/${repoKey}/de/unijena/bioinf/ms/sirius/$version/sirius-$version-osx64-headless.zip)",
                "",
                "### Sources on GitHub",
                "- [SIRIUS frontend](https://github.com/boecker-lab/sirius_frontend)",
                "- [SIRIUS library](https://github.com/boecker-lab/sirius)"

        ] as List

        Files.deleteIfExists(outfile.toPath())
        Files.write(outfile.toPath(), lines, StandardOpenOption.CREATE)
    }
}

task refreshReadMe {
    inputs.files(refreshDownloadLinks.outputs.files.singleFile/*, downloadChangelog.outputs.files.singleFile*/)
    outputs.file("${getRootDir()}/README.md")
    group = 'publishing'

    doFirst {
        File dld = inputs.files.getAt(0)
//        File clg = inputs.files.getAt(1)
        File out = outputs.files.singleFile

        List<String> links = Files.readAllLines(dld.toPath())
//        List<String> changes = Files.readAllLines(clg.toPath())


        Map<String, String> keywords = ['<!--begin download-->': '<!--end download-->'/*, '<!--begin changelog-->': '<!--end changelog-->'*/]
        Map<String, List<String>> replacements = ['<!--begin download-->': links/*, '<!--begin changelog-->': changes*/]

        List<String> lines = Files.readAllLines(out.toPath())
        List<String> nuLines = new LinkedList<>()
        String keyword = null
        String keywordEnd = null

        lines.each { String line ->
            if (keyword == null) {
                keywordEnd = keywords.get(line)
                nuLines.add(line)
                if (keywordEnd != null) {
                    keyword = line
                    def r = replacements.get(keyword)

                    nuLines.add('')
                    nuLines.addAll(r)
                }
            } else if (line.equals(keywordEnd)) {
                nuLines.add('')
                nuLines.add(line)
                keyword = null
                keywordEnd = null
            }
        }


        Files.deleteIfExists(out.toPath())
        Files.write(out.toPath(), nuLines, StandardOpenOption.CREATE)
    }
}
//refreshReadMe.dependsOn downloadChangelog
refreshReadMe.dependsOn refreshDownloadLinks
// publication artifactory
artifactory {
    contextUrl = 'https://bio.informatik.uni-jena.de/repository/'
    publish {
        repository {
            repoKey = "${project.version.toString().endsWith('-SNAPSHOT') ? 'dist-snapshot-local' : 'dist-release-local'}"
            username = System.properties['de.unijena.bioinf.build.artifactory.username']
            password = System.properties['de.unijena.bioinf.build.artifactory.password']
        }
        defaults {
            //Publish every distribution to Artifactory
            publications("sirius")
            publications("manual")
        }
    }
}

artifactoryPublish.dependsOn 'refreshDownloadLinks'
artifactoryPublish.dependsOn 'refreshReadMe'




