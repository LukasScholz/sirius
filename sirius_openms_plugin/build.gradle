import java.nio.file.Files

dependencies {
//project
    compile project(':sirius_cli')
}

/*################### Environment variables ################### */
mainClassName = "de.unijena.bioinf.ms.cli.FingeridApplication"
project.ext.set("type", "console")

/*################### Jar build Stuff ################### */
jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

/*################### Windows release Stuff ################### */
launch4j {
    mainClassName = project.mainClassName
    headerType = "$project.type"
    jreRuntimeBits = "$project.arch"
    outfile = "${project.appName}.exe"
    jar = "../../../All/Sirius/lib/${project(':sirius_gui').tasks.jar.archiveName}"
    classPath = ["${runtimeClasspath.replace('${', '%').replace('}', '%')}", "../../../All/Sirius/lib/*"]
}

startScripts {
    applicationName = "${project.appName}"

    doLast {
        def openMSLibPath = '$APP_HOME/../../../All/Sirius/lib'
        String[] lines = unixScript.text.split(System.lineSeparator())

        int insert = -1;
        for (int i = 0; i < lines.length; i++) {
            if (lines[i].startsWith('APP_HOME="`pwd -P`"')) {
                insert = i + 1;
            }
            if (lines[i].startsWith('CLASSPATH=')) {
                lines[i] = "CLASSPATH=\"${openMSLibPath}/*:${runtimeClasspath}\""
            }
        }
        if (insert >= 0)
            lines = (lines as List).plus(insert, 'APP_HOME="$APP_HOME/Sirius"')
        unixScript.text = lines.join(System.lineSeparator())
    }
}


task downloadOpenmsScript {
    project.ext.set("openmsScript", getBuildDir().toPath().resolve('tmp/openmsScript/').toFile())
} << {
    def scriptURL = new URL("https://raw.githubusercontent.com/OpenMS/THIRDPARTY/master/Linux/64bit/Sirius/sirius")

    java.nio.file.Path dir = project.openmsScript.toPath()
    dir.toFile().deleteDir()
    Files.createDirectories(dir)

    java.nio.file.Path f = dir.resolve('sirius')
    if (Files.notExists(f)) {
        def file = f.newOutputStream()
        file << scriptURL.openStream()
        file.close()
        exec {
            executable 'chmod'
            args '755', f.toAbsolutePath().toString()
        }
    }
}

/*################### Build distributions ################### */
task distribute { group = 'distribution' }

distributions {
    //create OpenMS dist
    def n = "openMS"
    create(n, {
        baseName = "${project.appName}-$n"
        contents {
            into('All/Sirius/lib') {
                from("build/install/${project.name}/lib") {
                    exclude libExclude
                }
            }

            project.arch.split(',').each { ar ->
                into("Linux/${ar}bit/Sirius/lib") {
                    from("${project.glpkPath}/l${ar}/") {
                        include('libglpk.so.40')
                        include('libglpk_java.so')
                    }
                    exclude('*.zip')
                }

                into("Linux/${ar}bit/Sirius") {
                    from project.openmsScript
                    /*from("build/install/${project.name}/bin") {
                        exclude("*.bat")
                    }*/
                    from("${project.distPath}") {
                        include('COPYING.txt')
                    }
                    from("${getRootDir()}/LICENSE.txt")
                }

                into("Windows/${ar}bit/Sirius") {
                    from { "${project.glpkPath}/w${ar}/" }
                    from("${project.distPath}") {
                        include('COPYING.txt')
                    }
                    from { "${getRootDir()}/LICENSE.txt" }
                    from('build/launch4j') {
                        include("sirius-console-${ar}.exe")
                    }
                }

            }
            into('MacOS/64bit/Sirius/lib') {
                from("${project.glpkPath}/osx/")
                exclude('*.zip')
            }

            into('MacOS/64bit/Sirius') {
                from project.openmsScript
                /*from("build/install/${project.name}/bin") {
                    exclude("*.bat")
                }*/
                from("${project.distPath}") {
                    include('COPYING.txt')
                }
                from("${getRootDir()}/LICENSE.txt")
            }
        }
    })
    distribute.dependsOn 'downloadOpenmsScript'
    distribute.dependsOn "${n}DistZip"
    getTasks().findByPath("${n}DistZip").dependsOn ':downloadGLPK'
    getTasksByName("${n}DistTar", false).each { it.setEnabled(false) }

    project.getTasksByName("distTar", false).each { it.setEnabled(false) }
    project.getTasksByName("distZip", false).each { it.setEnabled(false) }

    openMSDistZip.dependsOn 'installDist'
    openMSDistTar.dependsOn 'installDist'
    installOpenMSDist.dependsOn 'installDist'
    openMSDistZip.dependsOn 'createExe'
    openMSDistTar.dependsOn 'createExe'
    installOpenMSDist.dependsOn 'createExe'
}

// what should be published
publishing {
    publications {
        sirius(MavenPublication) {
            artifactId = "$name"
            groupId = "$group"
            pom.withXml {}
            artifact source: openMSDistZip, classifier: 'openMS', extension: 'zip'
        }
    }
}