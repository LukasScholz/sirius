plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'war'
    id 'java-library'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {//public libs only so anybody can build the frontend without login
        url "https://bio.informatik.uni-jena.de/repository/libs-oss"
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    maven {
        url "https://www.xypron.de/repository" //glpk repo
    }
    maven {
        url "https://www.ebi.ac.uk/Tools/maven/repos/content/groups/ebi-repo/"
    }
}

ext['jna.version'] = '5.4.0' //force correct jna version -> springs is not compatible with ilp solver
ext['slf4j.version'] = slf4j_version
ext['okhttp.version'] = '4.8.1'

dependencies {
    api project(':sirius_cli')
//    implementation project(':rest_service:rest_db')
//    implementation group: "mysql", name: "mysql-connector-java", version: "$jdbc_mysql_version"

//    implementation project(':confidence_score_train')

    //internal
//    implementation group: "de.unijena.bioinf.ms", name: "web_core_oss", version: "$fingeridVersion"
//    implementation group: "de.unijena.bioinf.ms", name: "model_store_oss", version: "$fingeridVersion"
//    implementation group: "de.unijena.bioinf.ms", name: "chemical_db_oss", version: "$fingeridVersion"
//    implementation group: "de.unijena.bioinf.ms", name: "chemdb_blob_oss", version: "$fingeridVersion"
//    implementation group: "de.unijena.bioinf.ms", name: "chemdb_sql_oss", version: "$fingeridVersion"
//    implementation group: "de.unijena.bioinf.ms", name: "chemdb_utils_oss", version: "$fingeridVersion"

    // CDK
//    for (module in ["sdg", "render", "renderbasic", "silent", "renderextra", "renderawt", "inchi", "qsarmolecular", "interfaces", "core"]) {
//        implementation group: "org.openscience.cdk", name: "cdk-$module", version: "$cdk_version"
//    }

//    implementation group: "org.apache.xmlgraphics", name: "batik-awt-util", version: "$batik_version"
//    implementation group: "org.apache.xmlgraphics", name: "batik-svggen", version: "$batik_version"
//    implementation group: "org.apache.xmlgraphics", name: "batik-dom", version: "$batik_version"
//

//    implementation group: 'org.apache.commons', name: 'commons-email', version: "${commons_email_version}"

    //////////// configure logging ///////////////////
    //logging bridges
    implementation("org.slf4j:log4j-over-slf4j:$slf4j_version")
    implementation("org.slf4j:jcl-over-slf4j:$slf4j_version")
    implementation("org.slf4j:jul-to-slf4j:$slf4j_version")
    ////////////////////////////////////////////////////


    //////////// Spring (boot) ////////////////////////
    // Default bootJar config
    implementation("org.springframework.boot:spring-boot-starter-web")
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
//    providedRuntime 'org.springframework.boot:spring-boot-starter-jetty'

    // expose operational information about the running application via /actuator
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation 'it.unimi.dsi:fastutil:8.5.8' //replaces old spring version
    ////////////////////////////////////////////////////

    ////////////////////// API DOC ///////////////////
    // Generate interactive documentation from a Swagger-compliant API
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
    implementation 'org.springdoc:springdoc-openapi-javadoc:1.6.9'
    //process javadoc for swagger/openapi
    annotationProcessor 'com.github.therapi:therapi-runtime-javadoc-scribe:0.13.0'
//    implementation 'org.springdoc:springdoc-openapi-security:1.5.13'
    ////////////////////////////////////////////////////

    //getter setter constructor logger, save boilerplate
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // thymeleaf pages
//    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // security
//    implementation 'org.springframework.boot:spring-boot-starter-security'
//    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
//    implementation 'org.springframework.security:spring-security-oauth2-jose'


//    implementation 'io.micrometer:micrometer-core'
//    implementation 'io.micrometer:micrometer-registry-prometheus'
    //must match minio version
    implementation 'com.squareup.okhttp3:okhttp:4.8.1'



    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

configurations.all {
    //replaced by log4j-over-slf4j
    it.exclude group: "log4j", module: "log4j"
    //replaced by jcl-over-slf4j
    it.exclude group: "commons-logging", module: "commons-logging"
}

jar {
    enabled = false
}

bootJar {
    classifier = 'boot'
    layered {
        enabled = true
    }
    launchScript()
}

/*
task buildFrontend(type: Exec, group: 'build') {
    //todo make conditional -> only if it doe not exists
    workingDir "${getRootProject().projectDir}/frontend"
    commandLine(['npm', 'run', 'build'])
}

task copyFrontend(type: Copy, group: 'build setup') {
    dependsOn(buildFrontend)
    from "${getRootProject().projectDir}/frontend/dist"
    into "${getRootProject().projectDir}/middleware/build/resources/main/public"
}
bootJar.mustRunAfter(copyFrontend)

task bootJarWithFrontend(group: 'build') {
    dependsOn(copyFrontend)
    dependsOn(bootJar)
}
*/


artifactory {
    contextUrl = 'https://bio.informatik.uni-jena.de/repository/'
    publish {
        repository {
            if (version.toString().endsWith('-SNAPSHOT'))
                repoKey = 'libs-snapshot-local'
            else
                repoKey = 'libs-release-local'

            username = project.findProperty('de.unijena.bioinf.build.artifactory.username')
            password = project.findProperty('de.unijena.bioinf.build.artifactory.password')
        }
        defaults {
            publications('mavenJava')
        }
    }
}







