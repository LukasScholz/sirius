import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

ext['jna.version'] = '5.4.0'

dependencies {
//project
    compile project(':sirius_rest_service')
    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: "$slf4j_version"

//internal
    compile group: 'de.unijena.bioinf', name: 'jjobs-swing', version: "$jjobs_version"
//external
    compile group: 'javax.json', name: 'javax.json-api', version: "$json_version"
    compile group: 'org.glassfish', name: 'javax.json', version: "$json_impl_version"

    compile "net.sf.opencsv:opencsv:2.3"
    compile "org.swinglabs.swingx:swingx-all:1.6.5-1"
    compile "org.openscience.cdk:cdk-render:$cdk_version"
    compile "org.openscience.cdk:cdk-renderextra:$cdk_version"
    compile "org.openscience.cdk:cdk-renderawt:$cdk_version"
    compile "org.openscience.cdk:cdk-data:$cdk_version"
    compile "org.openscience.cdk:cdk-core:$cdk_version"
    compile "org.openscience.cdk:cdk-interfaces:$cdk_version"
    compile "org.openscience.cdk:cdk-inchi:$cdk_version"
    compile "org.openscience.cdk:cdk-smiles:$cdk_version"
    compile "org.openscience.cdk:cdk-io:$cdk_version"
    compile "org.openscience.cdk:cdk-ioformats:$cdk_version"
    compile "org.openscience.cdk:cdk-sdg:$cdk_version"
    compile "org.openscience.cdk:cdk-smarts:$cdk_version"
    compile "org.openscience.cdk:cdk-legacy:$cdk_version"

    compile group: 'com.glazedlists', name: 'glazedlists', version: '1.11.0'

    //compile group: 'com.kitfox.svg', name: 'svg-salamander', version: '1.0'
    compile group: 'org.apache.xmlgraphics', name: 'batik-rasterizer', version: '1.8'
    compile group: 'org.apache.xmlgraphics', name: 'fop', version: '2.3'
}


/*################### Environment variables ################### */
mainClassName = 'org.springframework.boot.loader.PropertiesLauncher'
project.ext.set("arch", ['64'])
project.ext.set("type", ['gui','console'])

/*################### Jar build Stuff ################### */
bootJar {
    manifest {
        attributes 'Main-Class': mainClassName
        attributes 'Start-Class': "de.unijena.bioinf.ms.middleware.SiriusGUIApplication"
    }
}

/*################### Windows release Stuff ################### */
project.type.each{t ->
    project.arch.each { a ->
        tasks.create("launch4j-$t-$a", edu.sc.seis.launch4j.tasks.Launch4jLibraryTask) {
            group = 'launch4j'
            mainClassName = project.mainClassName
            jar = project.bootJar.archiveFileName.get()
            bundledJre64Bit = true
            bundledJrePath = 'zulu'
            headerType = t
            jreRuntimeBits = a
            outfile = "${project.appName}-${t}-${a}.exe"
            if(t.equals('gui')){
                cmdLine = 'gui'
                splashFileName = "${project.distPath}/sirius-splash.bmp"
            }

        }
    }
}

/*################### Build distributions ################### */
task distribute { group = 'distribution' }
distribute.dependsOn ':buildDoku'

distributions {
    project.arch.each { ar ->
        def n = "${project.linSuffix}${ar}"

        create(n, {
            baseName = "${project.appName}-$n"
            contents {
                into('lib') {
                    from("build/install/sirius_gui-boot/lib")
                    from("${project.glpkPath}/l${ar}/") {
                        include('libglpk.so.40')
                        include('libglpk_java.so')
                    }
                    from("${project.clpPath}/l${ar}/")
                    exclude('*.zip')
                }

                into("${jre_path}"){
                    from("${project.jreBuildPath}/zulu${zulu_jre_version}-ca-fx-jre${jre_version}-linux_x${ar}/")
                }

                into('bin') {
                    from("build/scripts/sirius")
                    from("${project.distPath}")
                    from("${getRootDir()}/LICENSE.txt")
                }
                into('doc') {
                    from(project.pdfManualPath)
                }
                into('doc/html') {
                    from("${project.manualPath}/build/html")
                }
            }
        })
        distribute.dependsOn "${n}DistZip"
        getTasks().findByPath("${n}DistZip").dependsOn ':downloadGLPK'
        getTasks().findByPath("${n}DistZip").dependsOn ':downloadCLP'
        getTasks().findByPath("${n}DistZip").dependsOn ':downloadJRE'
        getTasksByName("${n}DistTar", false).each { it.setEnabled(false) }
    }

    //crete win32And64 zip tasks
    project.arch.each { ar ->
        def n = "${project.winSuffix}${ar}"
        create(n, {

            baseName = "${project.appName}-$n"
            contents {
                from("build/install/sirius_gui-boot/lib")
                from("${project.glpkPath}/w${ar}/")
                from("${project.clpPath}/w${ar}/")
                from("${project.distPath}") {
                    exclude('sirius-gui')
                }
                into("${jre_path}"){
                    from("${project.jreBuildPath}/zulu${zulu_jre_version}-ca-fx-jre${jre_version}-win_x${ar}/")
                }
                from { "${getRootDir()}/LICENSE.txt" }
                from('build/launch4j') {
                    include("*-${ar}.exe")
                }
                into('doc') {
                    from(project.pdfManualPath)
                }
                into('doc/html') {
                    from("${project.manualPath}/build/html")
                }
            }
        })
        distribute.dependsOn "${n}DistZip"
        getTasks().findByPath("${n}DistZip").dependsOn ':downloadGLPK'
        getTasks().findByPath("${n}DistZip").dependsOn ':downloadCLP'
        getTasks().findByPath("${n}DistZip").dependsOn ':downloadJRE'
        getTasks().findByPath("${n}DistZip").dependsOn 'createAllExecutables'
        getTasksByName("${n}DistTar", false).each { it.setEnabled(false) }
    }

    //create osx zip
    def n = "${project.macSuffix}64"
    create(n, {
        baseName = "${project.appName}-$n"
        contents {
            into('lib') {
                from("build/install/sirius_gui-boot/lib")
                from("${project.glpkPath}/osx/")
                from("${project.clpPath}/osx/")
                exclude('*.zip')
            }

            into("${jre_path}"){
                from("${project.jreBuildPath}/zulu${zulu_jre_version}-ca-fx-jre${jre_version}-macosx_x64/")
            }

            into('bin') {
                from("build/scripts/sirius")
                from("${project.distPath}")
                from("${getRootDir()}/LICENSE.txt")
            }
            into('doc') {
                from(project.pdfManualPath)
            }
            into('doc/html') {
                from("${project.manualPath}/build/html")
            }
        }
    })

    distribute.dependsOn "${n}DistZip"
    getTasks().findByPath("${n}DistZip").dependsOn ':downloadGLPK'
    getTasks().findByPath("${n}DistZip").dependsOn ':downloadCLP'
    getTasks().findByPath("${n}DistZip").dependsOn ':downloadJRE'

    getTasksByName("${n}DistTar", false).each { it.setEnabled(false) }
    project.getTasksByName("distTar", false).each { it.setEnabled(false) }
    project.getTasksByName("distZip", false).each { it.setEnabled(false) }

    //create libs
    linux64DistZip.dependsOn 'installBootDist'
    installLinux64Dist.dependsOn 'installBootDist'

    osx64DistZip.dependsOn 'installBootDist'
    installOsx64Dist.dependsOn 'installBootDist'

    win64DistZip.dependsOn 'installBootDist'
    installWin64Dist.dependsOn 'installBootDist'

    //create starter
    linux64DistZip.dependsOn 'startScripts'
    installLinux64Dist.dependsOn 'startScripts'

    osx64DistZip.dependsOn 'startScripts'
    installOsx64Dist.dependsOn 'startScripts'

    win64DistZip.dependsOn 'createExe'
    installWin64Dist.dependsOn 'createExe'
}

// what should be published
publishing {
    publications {
        sirius(MavenPublication) {
            artifactId = "${project.appName}"
            groupId = "$group"

            pom.withXml {}
            artifact source: win64DistZip, classifier: 'win64', extension: 'zip'
            artifact source: linux64DistZip, classifier: 'linux64', extension: 'zip'
            artifact source: osx64DistZip, classifier: 'osx64', extension: 'zip'
        }
    }
}

artifactoryPublish.dependsOn 'distribute'

task runGUI(type: Exec, dependsOn: installLinux64Dist, group: 'application') {
    doFirst {
        getLogger().lifecycle("====> Note: This uses the Systen JRE!")
    }
    File command = project.tasks.installLinux64Dist.outputs.files.singleFile.toPath().resolve("bin/${project.appName}-gui").toFile()
    commandLine([command.absolutePath])
}