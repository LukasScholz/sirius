/*plugins {
//    id 'edu.sc.seis.launch4j' version '1.6.1'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}*/
buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'de.unijena.bioinf.gradle', name: 'launch4j', version: '1.6.1'
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    }

}
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
//apply plugin: 'de.unijena.bioinf.launch4j'
apply plugin: 'edu.sc.seis.launch4j'

dependencies {
//project
    compile project(':chemistry_base')
    compile project(':io')
    compile project(':isotope_pattern:isotope_pattern_analysis')
    compile project(':fragmentation_tree:fragmentation_tree_construction')
    compile project(':sirius_frontend:sirius_cli')

//internal
    compile "de.unijena.bioinf:fingerblast:1.0.2-SNAPSHOT"
    compile "de.unijena.bioinf:Myxo:0.2"
//external
    compile group: 'javax.json', name: 'javax.json-api', version: "$json_version"
    compile group: 'org.glassfish', name: 'javax.json', version: "$json_impl_version"

    compile "net.sf.opencsv:opencsv:2.3"
    compile "org.swinglabs.swingx:swingx-all:1.+"
    compile "org.openscience.cdk:cdk-silent:1.5.10"
    compile "org.openscience.cdk:cdk-render:1.5.10"
    compile "org.openscience.cdk:cdk-renderextra:1.5.10"
    compile "org.openscience.cdk:cdk-renderawt:1.5.10"
    compile "org.openscience.cdk:cdk-data:1.5.10"
    compile "org.openscience.cdk:cdk-core:1.5.10"
    compile "org.openscience.cdk:cdk-interfaces:1.5.10"
    compile "org.openscience.cdk:cdk-inchi:1.5.10"
    compile "org.openscience.cdk:cdk-smiles:1.5.10"
    compile "org.openscience.cdk:cdk-sdg:1.5.10"
    compile "org.openscience.cdk:cdk-smarts:1.5.10"
    compile "org.apache.httpcomponents:httpclient:4.5.1"

    provided group: 'gurobi', name: 'gurobi-linux64', version: "$gurobi_version"
}

shadowJar {

    configurations = [project.configurations.compile]
    classifier = 'fat'
    manifest {
        attributes 'Class-Path': "$runtimeClasspath"
    }
}


def linSuffix = 'linux'
def winSuffix = 'win'

mainClassName = "de.unijena.bioinf.sirius.cli.SiriusApplication"
project.ext.set("arch", "64,32")
project.ext.set("type", "gui,console")
project.ext.set("appName", "sirius3")
project.ext.set("os", linSuffix)

launch4j {
    mainClassName = project.mainClassName
    mainClassNameGUI = 'de.unijena.bioinf.sirius.gui.mainframe.MainFrame'

    icon = file('src/main/resources/icons/sirius.ico')
    copyright = "Chair of Bioinformatics, Friedrich-Schiller-University Jena."
    companyName = "Friedrich-Schiller-University Jena"
    version = project.version
    textVersion = project.version
    supportUrl = "https://bio.informatik.uni-jena.de/software/sirius/"

    dontWrapJar = true
    headerType = "$project.type"
    jreRuntimeBits = "$project.arch"

    initialHeapPercent = 50
    maxHeapPercent = 80
    jdkPreference = "preferJre"

    guiCLIArgument = '--gui'

    outfile = "${project.appName}.exe"
    classPath = ["${runtimeClasspath.replace('${', '%').replace('}', '%')}"]
    jar = "lib/${project.tasks.jar.archiveName}"
}

createExe.dependsOn 'installDist'

startScripts {
    applicationName = "${project.appName}"

    doLast {
        unixScript.text = unixScript.text.replace('CLASSPATH=', "CLASSPATH=${runtimeClasspath}:")
        unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS=""' + "${System.lineSeparator()}" + 'export LD_LIBRARY_PATH=$GUROBI_HOME/lib:$APP_HOME/lib:$LD_LIBRARY_PATH')
    }
}


def fatJarFile = project.tasks.shadowJar.outputs.files.singleFile


distributions {
    project.arch.split(',').each { ar ->
        def n = "${linSuffix}${ar}"
        create(n, {
            baseName = "${project.appName}-$n"
            contents {
                into('lib') {
                    from("build/install/${project.name}/lib")
                    from("../glpk/l${ar}/")
                }

                into('bin') {
                    from("build/install/${project.name}/bin") {
                        exclude("*.bat")
                    }
                }
            }
        })
    }

    //crete win32And64 zip tasks
    project.arch.split(',').each { ar ->
        def n = "${winSuffix}${ar}"
        create(n, {

            baseName = "${project.appName}-$n"
            contents {
                into('lib') {
                    from('build/launch4j/lib')
                }
                from { "../glpk/w${ar}/" }
                from('build/launch4j') {
                    include("*-${ar}.exe")
                }
                //todo add doc
                /* into('doc') {
                     from{}
                 }*/
            }
        })
    }

    /*jar {
        baseName = project.getName()
        contents {
            from { 'src/main/resources/dist/' }
            from { fatJarFile }
        }
    }*/
}

/*task distribute(type: distributions) {}
distribute.dependsOn 'linux32DistZip', 'linux64DistZip', 'win32DistZip', 'win64DistZip'*/

/*distZip.dependsOn 'shadowJar'
distTar.dependsOn 'shadowJar'
installDist.dependsOn 'shadowJar'*/

linux32DistZip.dependsOn 'installDist'
linux32DistTar.dependsOn 'installDist'
installLinux32Dist.dependsOn 'installDist'

linux64DistZip.dependsOn 'installDist'
linux64DistTar.dependsOn 'installDist'
installLinux64Dist.dependsOn 'installDist'

win32DistZip.dependsOn 'createExe'
win32DistTar.dependsOn 'createExe'
installWin32Dist.dependsOn 'createExe'

win64DistZip.dependsOn 'createExe'
win64DistTar.dependsOn 'createExe'
installWin64Dist.dependsOn 'createExe'

