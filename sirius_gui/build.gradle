/*plugins {
    id "com.github.kkdad.dependency-license-report" version "1.14.2"
}

licenseReport {
    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
//    outputDir = "$projectDir/build/licenses"

    // Select projects to examine for dependencies.
    // Defaults to current project and all its subprojects
//    projects = [project] + project.subprojects

    // Adjust the configurations to fetch dependencies, e.g. for Android projects. Default is 'runtimeClasspath'
    configurations = ['compile']
    // Use 'ALL' to dynamically resolve all configurations:
    // configurations = ALL

    // List the groups ids to exclude from dependency report. Supports regular expressions.
    // For finer granularity, see: excludes.
    excludeGroups = ['cplex', 'gurobi']

    // List the ids (in module:name format) to exclude from dependency report. Supports regular expressions.
    // By default excludes is empty.
//    excludes = ['moduleGroup:moduleName']

    // Don't include artifacts of project's own group into the report
    excludeOwnGroup = false

    // Set custom report renderer, implementing ReportRenderer.
    // Yes, you can write your own to support any format necessary.
//    renderers = [new XmlReportRenderer('third-party-libs.xml', 'Back-End Libraries')]

    // Set importers to import any external dependency information, i.e. from npm.
    // Custom importer should implement DependencyDataImporter interface.
//    importers = [new XmlReportImporter('Frontend dependencies', file(frontend_libs.xml))]

    // This is for the allowed-licenses-file in checkLicense Task
    // Accepts File, URL or String path to local or remote file
//    allowedLicensesFile = new File("$projectDir/config/allowed-licenses.json")
}*/

ext['jna.version'] = '5.4.0'

dependencies {
//project
    compile project(':sirius_cli')
//    compile "de.unijena.bioinf.ms:ft_glpk:$siriusVersion"
//    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: "$slf4j_version"

//internal
    compile group: 'de.unijena.bioinf', name: 'jjobs-swing', version: "$jjobs_version"

//external
    compile "net.sf.opencsv:opencsv:2.3"
    compile "org.swinglabs.swingx:swingx-all:1.6.5-1"
    compile "org.openscience.cdk:cdk-render:$cdk_version"
    compile "org.openscience.cdk:cdk-renderextra:$cdk_version"
    compile "org.openscience.cdk:cdk-renderawt:$cdk_version"
    compile "org.openscience.cdk:cdk-data:$cdk_version"
    compile "org.openscience.cdk:cdk-core:$cdk_version"
    compile "org.openscience.cdk:cdk-interfaces:$cdk_version"
    compile "org.openscience.cdk:cdk-inchi:$cdk_version"
    compile "org.openscience.cdk:cdk-smiles:$cdk_version"
    compile "org.openscience.cdk:cdk-io:$cdk_version"
    compile "org.openscience.cdk:cdk-ioformats:$cdk_version"
    compile "org.openscience.cdk:cdk-sdg:$cdk_version"
    compile "org.openscience.cdk:cdk-smarts:$cdk_version"
    compile "org.openscience.cdk:cdk-legacy:$cdk_version"

    compile group: 'com.glazedlists', name: 'glazedlists', version: '1.11.0'

    //compile group: 'com.kitfox.svg', name: 'svg-salamander', version: '1.0'
    compile group: 'org.apache.xmlgraphics', name: 'batik-rasterizer', version: '1.13'
    compile group: 'org.apache.xmlgraphics', name: 'fop', version: '2.3'
}




artifactory {
    contextUrl = 'https://bio.informatik.uni-jena.de/repository/'
    publish {
        repository {
            if (version.toString().endsWith('-SNAPSHOT'))
                repoKey = 'libs-snapshot-local'
            else
                repoKey = 'libs-release-local'

            username = System.getProperty('de.unijena.bioinf.build.artifactory.username')
            password = System.getProperty('de.unijena.bioinf.build.artifactory.password')
        }
        defaults {
            publications('mavenJava')
        }
    }
}