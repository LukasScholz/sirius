import java.nio.file.Files
import java.nio.file.StandardCopyOption

buildscript {
    repositories {
//        mavenLocal()
        maven {url "https://plugins.gradle.org/m2/"}
        maven {url "http://bio.informatik.uni-jena.de/artifactory/repo"}
    }
    dependencies {
        classpath group: 'de.unijena.bioinf.gradle', name: 'launch4jj', version: '1.6.1'
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    }

}
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'de.unijena.bioinf.launch4jj'

dependencies {
//project
    compile internal(':chemistry_base',version)
    compile internal(':io',version)
    compile internal(':isotope_pattern:isotope_pattern_analysis',version)
    compile internal(':fragmentation_tree:fragmentation_tree_construction',version)
    compile internal(':sirius_frontend:sirius_cli',version)

//internal
    compile "de.unijena.bioinf:fingerblast:1.0.2-SNAPSHOT"
    compile "de.unijena.bioinf:Myxo:0.2"
//external
    compile group: 'javax.json', name: 'javax.json-api', version: "$json_version"
    compile group: 'org.glassfish', name: 'javax.json', version: "$json_impl_version"

    compile "net.sf.opencsv:opencsv:2.3"
    compile "org.swinglabs.swingx:swingx-all:1.+"
    compile "org.openscience.cdk:cdk-silent:1.5.10"
    compile "org.openscience.cdk:cdk-render:1.5.10"
    compile "org.openscience.cdk:cdk-renderextra:1.5.10"
    compile "org.openscience.cdk:cdk-renderawt:1.5.10"
    compile "org.openscience.cdk:cdk-data:1.5.10"
    compile "org.openscience.cdk:cdk-core:1.5.10"
    compile "org.openscience.cdk:cdk-interfaces:1.5.10"
    compile "org.openscience.cdk:cdk-inchi:1.5.10"
    compile "org.openscience.cdk:cdk-smiles:1.5.10"
    compile "org.openscience.cdk:cdk-sdg:1.5.10"
    compile "org.openscience.cdk:cdk-smarts:1.5.10"
    compile "org.apache.httpcomponents:httpclient:4.5.1"

    provided group: 'gurobi', name: 'gurobi-linux64', version: "$gurobi_version"
}



/*################### Environment variables ################### */
def linSuffix = 'linux'
def winSuffix = 'win'

mainClassName = "de.unijena.bioinf.sirius.cli.SiriusApplication"
project.ext.set("arch", "64,32")
project.ext.set("type", "gui,console")
project.ext.set("appName", "sirius3")
project.ext.set("manualPath", '../manual')
project.ext.set("glpkPath", '../glpk')
project.ext.set("distPath", '../dist')


/*################### Building the Documentation ################### */
task cleanDoku(type: Exec) {
    group = 'documentation'
    workingDir = file("${project.manualPath}")
    commandLine(['make', 'clean'])
}

task htmlDoku(type: Exec) {
    group = 'documentation'
    workingDir = file("${project.manualPath}")
    commandLine(['make', 'html'])
}
htmlDoku.mustRunAfter cleanDoku

task mdDoku(type: Exec) {
    group = 'documentation'
    workingDir = file("${project.manualPath}")
    commandLine(['make', 'text'])
}
mdDoku.mustRunAfter cleanDoku


task pdfDoku(type: Exec) {
    group = 'documentation'
    workingDir = file("${project.manualPath}")
    commandLine(['make', 'latexpdf'])
}
pdfDoku.mustRunAfter cleanDoku

task buildDoku() {
    group = 'documentation'
}
buildDoku.doLast {
    def f = file("${project.manualPath}/source/index.rst").readLines()
    File out = file("${project.manualPath}/build/singleText/sirius.md")
    out.toPath().getParent().toFile().mkdirs();
    out.createNewFile()

    /*file("${project.manualPath}/build/text/index.txt").withInputStream() {
        out << it
    } //todo do we want the index file here?*/

    f.each {
        File ff = file("${project.manualPath}/build/text/${it.trim()}.txt")
        if (ff.exists()) {
            logger.lifecycle("Appending File: ${ff}")
            ff.withInputStream() {
                out << it
            }
        }
    }
    logger.lifecycle("copying SIRIUS.md to preject root")
    Files.copy(out.toPath(),file('../../README.md').toPath(),StandardCopyOption.REPLACE_EXISTING)
}
buildDoku.dependsOn cleanDoku, htmlDoku, mdDoku, pdfDoku
clean.dependsOn cleanDoku


/*################### Jar build Stuff ################### */
shadowJar {

    configurations = [project.configurations.compile]
    classifier = 'fat'
    manifest {
        attributes 'Class-Path': "$runtimeClasspath"
    }
}



/*################### Windows release Stuff ################### */
launch4j {
    mainClassName = project.mainClassName
    mainClassNameGUI = 'de.unijena.bioinf.sirius.gui.mainframe.MainFrame'

    icon = file('src/main/resources/icons/sirius.ico')
    copyright = "Chair of Bioinformatics, Friedrich-Schiller-University Jena."
    companyName = "Friedrich-Schiller-University Jena"
    version = project.version
    textVersion = project.version
    supportUrl = "https://bio.informatik.uni-jena.de/software/sirius/"

    dontWrapJar = true
    headerType = "$project.type"
    jreRuntimeBits = "$project.arch"

    initialHeapPercent = 50
    maxHeapPercent = 80
    jdkPreference = "preferJre"

    guiCLIArgument = '--gui'

    outfile = "${project.appName}.exe"
    classPath = ["${runtimeClasspath.replace('${', '%').replace('}', '%')}"]
    jar = "lib/${project.tasks.jar.archiveName}"
}

/*################### Linux release Stuff ################### */
startScripts {
    applicationName = "${project.appName}"

    doLast {
        unixScript.text = unixScript.text.replace('CLASSPATH=', "CLASSPATH=${runtimeClasspath}:")
        unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS=""' + "${System.lineSeparator()}" + 'export LD_LIBRARY_PATH=$GUROBI_HOME/lib:$APP_HOME/lib:$LD_LIBRARY_PATH')
    }
}



/*################### Build distributions ################### */
task distribute {group = 'distribution'}
distribute.dependsOn buildDoku

distributions {

    project.arch.split(',').each { ar ->
        def n = "${linSuffix}${ar}"
        create(n, {
            baseName = "${project.appName}-$n"
            contents {
                into('lib') {
                    from("build/install/${project.name}/lib")
                    from("${project.glpkPath}/l${ar}/")
                }

                into('bin') {
                    from("build/install/${project.name}/bin") {
                        exclude("*.bat")
                    }
                    from("${project.distPath}")
                }
                into('doc') {
                    from("${project.manualPath}/build/latex") {
                        include('SIRIUS.pdf')
                    }
                    from("${project.manualPath}/build/singleText")
                }
                into('doc/html') {
                    from("${project.manualPath}/build/html")
                }
            }
        })
        distribute.dependsOn "${n}DistZip"
    }

    //crete win32And64 zip tasks
    project.arch.split(',').each { ar ->
        def n = "${winSuffix}${ar}"
        create(n, {

            baseName = "${project.appName}-$n"
            contents {
                into('lib') {
                    from('build/launch4j/lib')
                }
                from { "${project.glpkPath}/w${ar}/" }
                from("${project.distPath}") {
                    exclude('sirius3-gui')
                }
                from('build/launch4j') {
                    include("*-${ar}.exe")
                }
                into('doc') {
                    from("${project.manualPath}/build/latex") {
                        include('SIRIUS.pdf')
                    }
                    from("${project.manualPath}/build/singleText")
                }
                into('doc/html') {
                    from("${project.manualPath}/build/html")
                }
            }
        })
        distribute.dependsOn "${n}DistZip"
    }
}

linux32DistZip.dependsOn 'installDist'
linux32DistTar.dependsOn 'installDist'
installLinux32Dist.dependsOn 'installDist'

linux64DistZip.dependsOn 'installDist'
linux64DistTar.dependsOn 'installDist'
installLinux64Dist.dependsOn 'installDist'

win32DistZip.dependsOn 'createExe'
win32DistTar.dependsOn 'createExe'
installWin32Dist.dependsOn 'createExe'

win64DistZip.dependsOn 'createExe'
win64DistTar.dependsOn 'createExe'
installWin64Dist.dependsOn 'createExe'

