/*plugins {
//    id 'edu.sc.seis.launch4j' version '1.6.1'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}*/
buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'de.unijena.bioinf.gradle', name: 'launch4j', version: '1.6.1'
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    }

}
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
//apply plugin: 'de.unijena.bioinf.launch4j'
apply plugin: 'edu.sc.seis.launch4j'

dependencies {
//project
    compile project(':chemistry_base')
    compile project(':io')
    compile project(':isotope_pattern:isotope_pattern_analysis')
    compile project(':fragmentation_tree:fragmentation_tree_construction')
    compile project(':sirius_frontend:sirius_cli')

//internal
    compile "de.unijena.bioinf:fingerblast:1.0.2-SNAPSHOT"
    compile "de.unijena.bioinf:Myxo:0.2"
//external
    compile group: 'javax.json', name: 'javax.json-api', version: "$json_version"
    compile group: 'org.glassfish', name: 'javax.json', version: "$json_impl_version"

    compile "net.sf.opencsv:opencsv:2.3"
    compile "org.swinglabs.swingx:swingx-all:1.+"
    compile "org.openscience.cdk:cdk-silent:1.5.10"
    compile "org.openscience.cdk:cdk-render:1.5.10"
    compile "org.openscience.cdk:cdk-renderextra:1.5.10"
    compile "org.openscience.cdk:cdk-renderawt:1.5.10"
    compile "org.openscience.cdk:cdk-data:1.5.10"
    compile "org.openscience.cdk:cdk-core:1.5.10"
    compile "org.openscience.cdk:cdk-interfaces:1.5.10"
    compile "org.openscience.cdk:cdk-inchi:1.5.10"
    compile "org.openscience.cdk:cdk-smiles:1.5.10"
    compile "org.openscience.cdk:cdk-sdg:1.5.10"
    compile "org.openscience.cdk:cdk-smarts:1.5.10"
    compile "org.apache.httpcomponents:httpclient:4.5.1"

    provided group: 'gurobi', name: 'gurobi-linux64', version: "$gurobi_version"
}

def linSuffix = 'Linux'
def winSuffix = 'Win'

mainClassName = "de.unijena.bioinf.sirius.cli.SiriusApplication"
project.ext.set("arch", "64")
project.ext.set("appName", "sirius3")
project.ext.set("os", linSuffix)

jar{
    println(configurations.getNames())
}



shadowJar {

    configurations = [project.configurations.compile]
    classifier = 'fat'
    manifest {
        attributes 'Class-Path': "$runtimeClasspath"
//        attributes 'Class-Path': "/home/fleisch/software/gurobi651/linux64/lib/gurobi.jar"
    }
}

launch4j {
    mainClassName = project.mainClassName
    icon = file('src/main/resources/icons/sirius.ico')
    copyright = "Chair of Bioinformatics, Friedrich-Schiller-University Jena. Kai DÃ¼hrkop and Marvin Meusel"
    companyName = "Friedrich-Schiller-University Jena"
    version = project.version
    textVersion = project.version
    initialHeapPercent = 50
    maxHeapPercent = 80
    jdkPreference = "preferJre"
    jreRuntimeBits = '64/32'
    outfile = "${project.appName}.exe"
    classPath = ["${runtimeClasspath.replace('${','%').replace('}','%')}"]
//    libraryDir = "./"
    copyConfigurable = project.tasks.shadowJar.outputs.files
    jar = "lib/${project.tasks.shadowJar.archiveName}"
//    println("lib/${project.tasks.jar.archiveName}")
}

startScripts {
    applicationName = "${project.appName}"
    doLast {
        unixScript.text = unixScript.text.replace("CLASSPATH=", "CLASSPATH=${runtimeClasspath}:")
        windowsScript.text = windowsScript.text.replace("set CLASSPATH=", "set CLASSPATH=${runtimeClasspath.replace('${','%').replace('}','%')};")
    }
}




def fatJarFile = project.tasks.shadowJar.outputs.files.singleFile
/*println(fatJarFile.toString())

distributions {

    linux {
        baseName = project.getName() + linSuffix
        contents {
            from { 'src/main/resources/dist/' }
            from { fatJarFile }
            from { 'src/main/resources/dist-linux/' }
        }
    }

    win {
        baseName = project.getName() + winSuffix
        contents {
            from { 'src/main/resources/dist/' }
            from { 'build/launch4j/' }
            from { fatJarFile }
        }
    }

    jar {
        baseName = project.getName()
        contents {
            from { 'src/main/resources/dist/' }
            from { fatJarFile }
        }
    }


}

task distribute(*//*type: distributions*//*) {}
distribute.dependsOn 'linuxDistZip', 'winDistZip', 'jarDistZip'


linuxDistZip.doLast {
    File file = project.tasks.linuxDistZip.outputs.files.singleFile
    println(file)
    file.renameTo(file.toString().replace((linSuffix + "-" + version + "."), "-" + version + linSuffix + "."))
}

winDistZip.doLast {
    File file = project.tasks.winDistZip.outputs.files.singleFile
    println(file)
    file.renameTo(file.toString().replace((winSuffix + "-" + version + "."), "-" + version + winSuffix + "."))
}

distZip.dependsOn 'shadowJar'
distTar.dependsOn 'shadowJar'
installDist.dependsOn 'shadowJar'

linuxDistZip.dependsOn 'shadowJar'
linuxDistTar.dependsOn 'shadowJar'
installLinuxDist.dependsOn 'shadowJar'

winDistZip.dependsOn 'createExe'
winDistTar.dependsOn 'createExe'
installWinDist.dependsOn 'createExe'*/

