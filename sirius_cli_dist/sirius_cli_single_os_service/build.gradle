buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

ext['jna.version'] = '5.4.0'


dependencies {
    compile project(':sirius_rest_service')
    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: "$slf4j_version"
}

mainClassName = 'org.springframework.boot.loader.PropertiesLauncher'
project.ext.set("type", ['console'])


/*################### Jar build Stuff ################### */
bootJar {
    manifest {
        attributes 'Main-Class': mainClassName
        attributes 'Start-Class': "de.unijena.bioinf.ms.middleware.SiriusMiddlewareApplication"
    }
}

/*################### Windows release Stuff ################### */
project.type.each { t ->
    project.arch.each { a ->
        tasks.create("launch4j-$t-$a", edu.sc.seis.launch4j.tasks.Launch4jLibraryTask) {
            group = 'launch4j'
            mainClassName = project.mainClassName
            headerType = t
            jreRuntimeBits = a
            jar = project.bootJar.archiveFileName.get()

            //this is to include JAVA_HOME variable
            bundledJre64Bit = a.equals('64')
            bundledJrePath = '%JAVA_HOME%'
            jreMinVersion = targetCompatibility

            outfile = "${project.appName}-${t}-${a}.exe"
        }
    }
}


/*################### Build distributions ################### */
task distribute { group = 'distribution' }
distribute.dependsOn ':buildDoku'

distributions {
    project.arch.each { ar ->
        def n = "${project.linSuffix}${ar}"
        create(n, {
            baseName = "${project.appName}-$n-headless-service"
            contents {
                into('lib') {
                    from("build/install/sirius_cli_single_os_service-boot/lib")
                    from("${project.glpkPath}/l${ar}/") {
                        include('libglpk.so.40')
                        include('libglpk_java.so')
                    }
                    from("${project.clpPath}/l${ar}/")
                }

                into('bin') {
                    from("build/scripts/sirius")
                    from("${project.distPath}") {
                        exclude('sirius-gui')
                    }
                    from("${getRootDir()}/LICENSE.txt")
                }
                into('doc') {
                    from(project.pdfManualPath)
                }
                into('doc/html') {
                    from("${project.manualPath}/build/html")
                }
            }
        })
        distribute.dependsOn "${n}DistZip"
        getTasks().findByPath("${n}DistZip").dependsOn ':downloadGLPK'
        getTasks().findByPath("${n}DistZip").dependsOn ':downloadCLP'
        getTasksByName("${n}DistTar", false).each { it.setEnabled(false) }
    }

    //crete win32And64 zip tasks
    project.arch.each { ar ->
        def n = "${project.winSuffix}${ar}"
        create(n, {

            baseName = "${project.appName}-$n-headless-service"
            contents {
                from("build/install/sirius_cli_single_os_service-boot/lib")
                from { "${project.glpkPath}/w${ar}/" }
                from("${project.clpPath}/w${ar}/")
                from("${project.distPath}") {
                    exclude('sirius-gui')
                }
                from { "${getRootDir()}/LICENSE.txt" }
                from('build/launch4j') {
                    include("*-${ar}.exe")
                }
                into('doc') {
                    from(project.pdfManualPath)
                }
                into('doc/html') {
                    from("${project.manualPath}/build/html")
                }
            }
        })
        distribute.dependsOn "${n}DistZip"
        getTasks().findByPath("${n}DistZip").dependsOn ':downloadGLPK'
        getTasks().findByPath("${n}DistZip").dependsOn ':downloadCLP'
        getTasks().findByPath("${n}DistZip").dependsOn 'createAllExecutables'
        getTasksByName("${n}DistTar", false).each { it.setEnabled(false) }
    }

    //create osx zip
    def n = "${project.macSuffix}64"
    create(n, {
        baseName = "${project.appName}-$n-headless-service"
        contents {
            into('lib') {
                from("build/install/sirius_cli_single_os_service-boot/lib")
                from("${project.glpkPath}/osx/")
                from("${project.clpPath}/osx/")
                exclude('*.zip')
            }

            into('bin') {
                from("build/scripts/sirius")
                from("${project.distPath}") {
                    exclude('sirius-gui')
                }
                from("${getRootDir()}/LICENSE.txt")
            }
            into('doc') {
                from(project.pdfManualPath)
            }
            into('doc/html') {
                from("${project.manualPath}/build/html")
            }
        }
    })
    distribute.dependsOn "${n}DistZip"
    getTasks().findByPath("${n}DistZip").dependsOn ':downloadGLPK'
    getTasks().findByPath("${n}DistZip").dependsOn ':downloadCLP'
    getTasksByName("${n}DistTar", false).each { it.setEnabled(false) }

    project.getTasksByName("distTar", false).each { it.setEnabled(false) }
    project.getTasksByName("distZip", false).each { it.setEnabled(false) }

    //create libs
    linux64DistZip.dependsOn 'installBootDist'
    installLinux64Dist.dependsOn 'installBootDist'

    osx64DistZip.dependsOn 'installBootDist'
    installOsx64Dist.dependsOn 'installBootDist'

    win64DistZip.dependsOn 'installBootDist'
    installWin64Dist.dependsOn 'installBootDist'

    //create starter
    linux64DistZip.dependsOn 'startScripts'
    installLinux64Dist.dependsOn 'startScripts'

    osx64DistZip.dependsOn 'startScripts'
    installOsx64Dist.dependsOn 'startScripts'

    win64DistZip.dependsOn 'createExe'
    installWin64Dist.dependsOn 'createExe'

    //create libs 32
    linux32DistZip.dependsOn 'installBootDist'
    installLinux32Dist.dependsOn 'installBootDist'

    win32DistZip.dependsOn 'installBootDist'
    installWin32Dist.dependsOn 'installBootDist'

    //create starter 32
    linux32DistZip.dependsOn 'startScripts'
    installLinux32Dist.dependsOn 'startScripts'

    win32DistZip.dependsOn 'createExe'
    installWin32Dist.dependsOn 'createExe'
}

// what should be published
publishing {
    publications {
        sirius(MavenPublication) {
            artifactId = "${project.appName}"
            groupId = "$group"

            pom.withXml {}
            artifact source: win64DistZip, classifier: 'win64-headless-service', extension: 'zip'
            artifact source: win32DistZip, classifier: 'win32-headless-service', extension: 'zip'
            artifact source: linux32DistZip, classifier: 'linux32-headless-service', extension: 'zip'
            artifact source: linux64DistZip, classifier: 'linux64-headless-service', extension: 'zip'
            artifact source: osx64DistZip, classifier: 'osx64-headless-service', extension: 'zip'
        }

    }
}
artifactoryPublish.dependsOn 'distribute'


task runCLI(type: Exec, dependsOn: installLinux64Dist, group: 'application') {
    File command = project.tasks.installLinux64Dist.outputs.files.singleFile.toPath().resolve("bin/${project.appName}").toFile()
    commandLine([command.absolutePath])
}