import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'org.beryx.runtime' version '1.11.4'
}
subprojects {
    apply plugin: 'ManifestClasspath'
    //this is to keep classpath away from commandline because it may get too long for windows
    apply plugin: 'org.beryx.runtime'

    def OS = DefaultNativePlatform.currentOperatingSystem
    String nativeLibs
    String osName
    String installerName

    if (OS.isLinux()) {
        nativeLibs = 'l64'
        osName = 'linux64'
        installerName = 'deb'
    } else if (OS.isWindows()) {
        nativeLibs = 'w64'
        osName = 'win64'
        installerName = 'msi'
    } else if (OS.isMacOsX()) {
        nativeLibs = 'osx'
        osName = 'osx64'
        installerName = 'pkg'
    }

    runtime {
        options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
        modules = [
                'java.sql',
//                'javafx.base',
                'java.desktop',
//                'javafx.web',
//                'javafx.graphics',
                'java.logging',
//                'javafx.swing',
                'jdk.jsobject',
                'java.xml',
                'jdk.xml.dom',
                'java.datatransfer',
                'java.naming',
                'java.prefs',
//                'javafx.controls'
        ]

        targetPlatform(osName) {
            if (OS.isLinux()) {
                jdkHome = jdkDownload("https://cdn.azul.com/zulu/bin/zulu14.29.23-ca-fx-jdk14.0.2-linux_x64.tar.gz")
            } else if (OS.isWindows()) {
                jdkHome = jdkDownload("https://cdn.azul.com/zulu/bin/zulu14.29.23-ca-fx-jdk14.0.2-win_x64.zip")
            } else if (OS.isMacOsX()) {
                jdkHome = jdkDownload("https://cdn.azul.com/zulu/bin/zulu14.29.23-ca-fx-jdk14.0.2-macosx_x64.tar.gz") {
                    pathToHome = "zulu14.29.23-ca-fx-jdk14.0.2-macosx_x64/zulu-14.jdk/Contents/Home"
                }
            } else {
                throw new RuntimeException("Could not detect OS for packaging!")
            }
        }

        jpackage {
            targetPlatformName = osName
            installerType = installerName
            imageName = 'sirius'


            outputDir = "distributions"

            installerOptions = [
                    '--verbose',
                    '--vendor', 'FSU Jena',
                    '--license-file', "${project.getRootProject().projectDir}/dist/LICENSE-Full.txt",
                    '--description', 'SIRIUS is a java-based software framework for discovering a landscape of de-novo identification of metabolites using tandem mass spectrometry.',

            ]
            if (OS.isLinux()) {
                //todo rpm check
                installerOptions += [
                        '--app-version', "${project.version}",
                        '--linux-package-name', 'sirius',
                        '--linux-menu-group', 'Science',
                        '--linux-deb-maintainer', 'sirius@uni-jena.de',
                        '--linux-shortcut',
                ]
                imageOptions += [
                        '--icon', "${project.getRootProject().projectDir}/icons/sirius-icon.png",
                ]
            } else if (OS.isWindows()) {
                installerOptions += [
                        '--app-version', "${project.version.replace('-SNAPSHOT', '')}",
                        '--win-dir-chooser',
                        '--win-menu',
//                    '--win-shortcut',
                        '--win-menu-group', 'SIRIUS'
//                    '--win-per-user-install',
                ]
                imageOptions += [
                        '--icon', "${project.getRootProject().projectDir}/icons/sirius-icon.ico",
                ]
            } else if (OS.isMacOsX()) {
                installerOptions += [
                        '--app-version', "${project.version}",
                ]
                imageOptions += [
                        '--icon', "${project.getRootProject().projectDir}/icons/sirius-icon.icns",
                ]
            }
        }
    }

    jpackageImage.doLast {
        File intoFile;
        if (OS.isLinux()) {
            intoFile = jpackageImage.outputs.files.singleFile.toPath().resolve("${jpackageImage.getJpackageData().imageName}/lib/app").toFile()
        } else if (OS.isWindows()) {
            intoFile = jpackageImage.outputs.files.singleFile.toPath().resolve("${jpackageImage.getJpackageData().imageName}").toFile()
        } else if (OS.isMacOsX()) {
            intoFile = jpackageImage.outputs.files.singleFile.toPath().resolve("${jpackageImage.getJpackageData().imageName}.app/Contents/app").toFile()
        } else {
            throw new RuntimeException("Could not detect OS for packaging!")
        }
        copy {
            from("${project.glpkPath}/$nativeLibs/") {
                include('libglpk.so.40')
                include('libglpk_java.so')
            }
            from("${project.clpPath}/$nativeLibs/")
            into(intoFile)
        }
    }
    jpackageImage.dependsOn ':downloadGLPK'
    jpackageImage.dependsOn ':downloadCLP'

    task jpackageImageZip(dependsOn: jpackageImage) {
        group = 'build'

        doFirst {
            def imageDir = jpackageImage.outputs.files.singleFile.toPath().resolve("${jpackageImage.getJpackageData().imageName}").toFile()
            def parentPath = imageDir.parentFile.toPath()
            def zipFile = jpackageImage.outputs.files.singleFile.toPath().resolve("${jpackageImage.getJpackageData().imageName}-${project.version}-${osName}.zip").toFile()
            project.ant.zip(destfile: zipFile, duplicate: 'fail') {
                imageDir.eachFileRecurse { f ->
                    int mode = f.canExecute() ? 755 : 644
                    def relPath = parentPath.relativize(f.toPath()).toString()
                    zipfileset(dir: parentPath, includes: relPath, filemode: mode)
                }
            }
        }
    }

    task distribution { group = 'distribution' }
    distribution.dependsOn ':buildDoku'

    distribution.dependsOn 'jpackage'
    distribution.dependsOn 'jpackageImageZip'
}