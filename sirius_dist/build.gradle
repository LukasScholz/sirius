import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

import java.nio.file.Paths
import java.util.stream.Collectors

plugins {
    id 'org.beryx.runtime' version '1.11.4'
}

ext {
    OS = DefaultNativePlatform.currentOperatingSystem

    if (OS.isLinux()) {
        nativeLibs = 'l64'
        osName = 'linux64'
        zosName = 'linux'
        installerNameType = 'deb'
        installerAppendix = "_${version}-1_amd64.$installerNameType"
    } else if (OS.isWindows()) {
        nativeLibs = 'w64'
        osName = 'win64'
        zosName = 'win'
        installerNameType = 'msi'
        installerAppendix = "-${version.replace('-SNAPSHOT', '')}.$installerNameType"
    } else if (OS.isMacOsX()) {
        nativeLibs = 'osx'
        osName = 'osx64'
        zosName = 'macosx'
        installerNameType = 'pkg'
        installerAppendix = "-${version}.$installerNameType"
    }
}

task downloadJDK(type: Download) {
    String fname = "zulu${zulu_jre_version}-ca-fx-jdk${jre_version}-${zosName}_x64"
    String ext = ".${OS.isWindows() ? 'zip' : 'tar.gz'}";
    project.ext.set("jdkPath", getBuildDir().toPath().resolve('tmp').resolve(fname).toFile())


    src "https://bio.informatik.uni-jena.de/repository/list/ext-release-local/zulu/fx-jdk/${zulu_jre_version}/${fname + ext}"
    dest getBuildDir().toPath().resolve('tmp').resolve(fname + ext).toFile()
    onlyIfModified true
    overwrite false
}

task extractJDK(dependsOn: downloadJDK) {
    def s = downloadJDK.outputs.files.singleFile
    outputs.file(jdkPath)
    doLast {
        if (OS.isWindows()) {
            copy {
                from zipTree(s)
                into buildDir.toPath().resolve('tmp').toFile()
            }
        } else {
            exec { commandLine(['tar', 'zxf', s.absolutePath, '-C', buildDir.toPath().resolve('tmp').toString()]) }
        }
    }

}

task createRuntimeImgs(dependsOn: extractJDK) {
    String[] baseModules = ['java.sql', 'java.logging', 'jdk.jsobject', 'java.xml', 'jdk.xml.dom', 'java.datatransfer',
                            'java.naming', 'java.prefs', 'java.instrument']
    String[] fxModules = baseModules +
            ['java.desktop', 'javafx.base', 'javafx.web', 'javafx.graphics', 'javafx.swing', 'javafx.controls']
    String[] bootModules = baseModules +
            ['java.management']

    File jlink = jdkPath.toPath().resolve('bin').resolve(OS.isWindows() ? 'jlink.exe' : 'jlink').toFile()
    File outFX = buildDir.toPath().resolve('runtime').resolve("sirius-${jlink.toPath().getParent().getParent().getFileName().toString()}").toFile()
    File outheadl = Paths.get(outFX.absolutePath.replace('-fx-', '-headless-')).toFile()
    File outboot = Paths.get(outheadl.absolutePath.replace('-headless-', '-headless-boot-')).toFile()
    outputs.files(outFX, outheadl,outboot)

    String[] args = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    doLast {
        exec {
            String[] c = [jlink.absolutePath, '--add-modules', "${baseModules.join(',')}", '--output', outheadl.absolutePath]
            commandLine(c + args)
        }
        exec {
            String[] c = [jlink.absolutePath, '--add-modules', "${fxModules.join(',')}", '--output', outFX.absolutePath]
            commandLine(c + args)
        }
        exec {
            String[] c = [jlink.absolutePath, '--add-modules', "${bootModules.join(',')}", '--output', outboot.absolutePath]
            commandLine(c + args)
        }
    }
}



task downloadGLPK(type: Download) {
    project.ext.set("glpkPath", getBuildDir().toPath().resolve('glpk').toFile())
    String fname = "glpk-${project.glpk_lib_version}.zip"

    src "https://bio.informatik.uni-jena.de/repository/list/dist-release-local/de/unijena/bioinf/glpk/$fname"
    dest getBuildDir().toPath().resolve('tmp').resolve(fname).toFile()
    onlyIfModified true
    overwrite false
    doLast {
        if (!state.getUpToDate()) {
            copy {
                getLogger().lifecycle("Unpacking GLPK...")
                from zipTree(outputs.files.singleFile)
                into buildDir
            }
        } else {
            getLogger().lifecycle("Unpacking GLPK SKIPPED")
        }
    }
}

task downloadCLP(type: Download) {
    project.ext.set("clpPath", getBuildDir().toPath().resolve('clp').toFile())
    String fname = "clp-${project.clp_lib_version}.zip"

    src "https://bio.informatik.uni-jena.de/repository/list/dist-release-local/de/unijena/bioinf/clp/$fname"
    dest getBuildDir().toPath().resolve('tmp').resolve(fname).toFile()
    onlyIfModified true
    overwrite false
    doLast {
        if (!state.getUpToDate()) {
            copy {
                getLogger().lifecycle("Unpacking CPL...")
                from zipTree(outputs.files.singleFile)
                into buildDir

            }
        } else {
            getLogger().lifecycle("Unpacking CPL SKIPPED")
        }
    }
}


task downloadRuntimeImageFX(type: Download) {
    String fname = "sirius-zulu${zulu_jre_version}-ca-fx-jdk${jre_version}-${zosName}_x64.zip"

    src "https://bio.informatik.uni-jena.de/repository/list/dist-release-local/de/unijena/bioinf/jre/${zulu_jre_version}/${fname}"
    dest getBuildDir().toPath().resolve('runtime').resolve(fname).toFile()
    onlyIfModified true
    overwrite false
}

task extractRuntimeImageFX(type: ExtractRuntime, dependsOn: downloadRuntimeImageFX) {
    inputArchive = downloadRuntimeImageFX.dest
}

task downloadRuntimeImageHeadless(type: Download) {
    String fname = "sirius-zulu${zulu_jre_version}-ca-headless-jdk${jre_version}-${zosName}_x64.zip"

    src "https://bio.informatik.uni-jena.de/repository/list/dist-release-local/de/unijena/bioinf/jre/${zulu_jre_version}/${fname}"
    dest getBuildDir().toPath().resolve('runtime').resolve(fname).toFile()
    onlyIfModified true
    overwrite false
}

task extractRuntimeImageHeadless(type: ExtractRuntime, dependsOn: downloadRuntimeImageHeadless) {
    inputArchive = downloadRuntimeImageHeadless.dest
}

task downloadRuntimeImageHeadlessBoot(type: Download) {
    String fname = "sirius-zulu${zulu_jre_version}-ca-headless-boot-jdk${jre_version}-${zosName}_x64.zip"

    src "https://bio.informatik.uni-jena.de/repository/list/dist-release-local/de/unijena/bioinf/jre/${zulu_jre_version}/${fname}"
    dest getBuildDir().toPath().resolve('runtime').resolve(fname).toFile()
    onlyIfModified true
    overwrite false
}

task extractRuntimeImageHeadlessBoot(type: ExtractRuntime, dependsOn: downloadRuntimeImageHeadlessBoot) {
    inputArchive = downloadRuntimeImageHeadlessBoot.dest
}


task downloadManual(type: Download, group: 'documentation') {
    String manualName = "manual-$version-manual.pdf"
    src "https://bio.informatik.uni-jena.de/repository/dist-snapshot-local/de/unijena/bioinf/ms/manual/$version/$manualName"
    dest buildDir.toPath().resolve("manual/$manualName").toFile()
    onlyIfModified true
    overwrite false
}


subprojects {
    //this is to keep classpath away from commandline because it may get too long for windows
    apply plugin: 'ManifestClasspath'

    jar {
        enabled = false
    }

    //###################################### Start Default values ##########################################

//collect auto generated profiles and check them for null values
    task collectProfiles() {
        group = 'properties'
        outputs.dir("$buildDir/tmp/profiles/de.unijena.bioinf.ms.defaults")
        doLast {
            outputs.files.singleFile.deleteDir()
            copy {
                from configurations.runtime.resolve().stream().map { f ->
                    zipTree(f).matching {
                        include 'de.unijena.bioinf.ms.defaults/*.auto.config'
                    }
                }.collect(Collectors.toList())

                into "$buildDir/tmp/profiles"
            }
        }


    }
    collectProfiles.dependsOn('compileJava')

    task makeProfileTemplate() {
        group = 'properties'
        outputs.file("$buildDir/tmp/profiles_concat/concat.profile")
        doLast {
            outputs.files.singleFile.deleteDir()
            outputs.files.singleFile.withWriter { w ->
                // For each input file path
                tasks.collectProfiles.outputs.files.singleFile.listFiles().each { f ->
                    // Get a reader for the input file
                    f.withReader { r ->
                        // And write data from the input into the output
                        w << r << '\n'
                    }
                }
            }
        }
    }
    makeProfileTemplate.dependsOn('collectProfiles')

    task checkDefaultProfile() {
        group = 'properties'
        doLast {
            Properties defaultProfile = new Properties()
            tasks.makeProfileTemplate.outputs.files.singleFile
                    .withReader("UTF8", {
                        defaultProfile.load(it)
                    })

            def errorCount = 0
            logger.lifecycle(System.lineSeparator() + "Checking for NULL values in Profile...")
            defaultProfile.keys().each { e ->
                def v = defaultProfile.getProperty(e);
                if (v == null || ((String) v).isEmpty()) {
                    logger.warn("${e} is NULL!")
                    errorCount++
                }
            }
            if (errorCount > 0) {
                logger.error("FAILED: $errorCount NULL values found!" + System.lineSeparator())
                throw new GradleException("Error: There are NULL values in at least one auto.config files. See Warnings for more detailed information")
            }
            logger.lifecycle("DONE: No NULL values found!" + System.lineSeparator())
        }
    }
    checkDefaultProfile.dependsOn('makeProfileTemplate')

//###################################### END Default values ##########################################


    task distImage(type: AppImage, group: 'distribution') {
        dependsOn installDist, downloadManual, downloadCLP, downloadGLPK/*, checkDefaultProfile*/
        jpackagerBin = Paths.get(System.getProperty("java.home")).resolve('bin').resolve(OS.isWindows() ? 'jpackage.exe' : 'jpackage').toFile()
        mainClass = mainClassName
        outputDir = buildDir.toPath().resolve('distributions').toFile()
        winConsole = true

        jvmArgs = [
                '--illegal-access=permit',
                '--add-opens java.base/java.lang=ALL-UNNAMED',
                '--add-opens java.base/java.net=ALL-UNNAMED',
        ]


        if (OS.isWindows()) {
            jvmArgs += ['-Djava.library.path=$APPDIR\\..',
                        '-javaagent:$APPDIR\\\\agents-' + siriusVersion + '.jar',
            ]
        } else {
            jvmArgs += ['-Djava.library.path=\\$APPDIR/../native',
                        '-javaagent:\\$APPDIR/agents-' + siriusVersion + '.jar',
            ]

        }

        doLast {
            File nativeLibsTarget
            File appRootTarget
            if (OS.isLinux()) {
                appRootTarget = outputDir.toPath().resolve(imageName).toFile()
                nativeLibsTarget = appRootTarget.toPath().resolve("lib/native").toFile()
            } else if (OS.isWindows()) {
                appRootTarget = outputDir.toPath().resolve(imageName).toFile()
                nativeLibsTarget = appRootTarget
            } else if (OS.isMacOsX()) {
                appRootTarget = outputDir.toPath().resolve("${imageName}.app/Contents").toFile()
                nativeLibsTarget = appRootTarget.toPath().resolve("native").toFile()
            } else {
                throw new RuntimeException("Could not detect OS for packaging!")
            }

            copy {
                from("${glpkPath}/$nativeLibs/") {
                    include('libglpk.so.40')
                    include('libglpk_java.so')
                }
                from("${clpPath}/$nativeLibs/")
                into(nativeLibsTarget)
            }
            copy {
                from("${distPath}") {
                    include('COPYING.txt')
                    include('LICENSE.txt')
                }
                from(downloadManual.outputs.files.singleFile)
                into(appRootTarget)
            }
        }
    }

    task distImageZip(dependsOn: distImage, group: 'distribution') {
        doFirst {
            def imageDir = distImage.getImageDir()
            def parentPath = imageDir.parentFile.toPath()
            def zipFile = parentPath.resolve("${imageDir.getName()}.zip")
            project.ant.zip(destfile: zipFile, duplicate: 'fail') {
                imageDir.eachFileRecurse { f ->
                    int mode = f.canExecute() ? 755 : 644
                    def relPath = parentPath.relativize(f.toPath()).toString()
                    zipfileset(dir: parentPath, includes: relPath, filemode: mode)
                }
            }
        }
    }

    task distInstaller(type: AppInstaller, dependsOn: distImage, group: 'distribution') {
        distImg = distImage
        types = [installerNameType]
        licenseFile = getRootProject().rootDir.toPath().resolve('jpackage').resolve('LICENSE-Full.txt').toFile()

        //linux
        linuxMenuGroup = ['Applications', 'Science']
        debPackageMaintaner = 'sirius@uni-jena.de'
    }

    task distribution { group = 'distribution' }

    distribution.dependsOn 'distImageZip'
    distribution.dependsOn 'distInstaller'
    artifactoryPublish.dependsOn 'distribution'
}


//////////////////////////////////////////////////////////////////////////////////
abstract class ExtractRuntime extends DefaultTask {
    @InputFile
    File inputArchive

    @OutputDirectory
    def getOutputDir() {
        return new File(inputArchive.absolutePath.replace('.zip', ''))
    }

    @TaskAction
    def execute() {
        //stupid hack to delete write protected files on nix
        getLogger().lifecycle("Unpacking runtime image $inputArchive...")
        if (project.OS.isWindows()) {
            getOutputDir().deleteDir()
            project.copy {
                from project.zipTree(inputArchive)
                into getOutputDir().getParentFile()
            }
        } else {
            project.exec { commandLine(['rm', '-rf', getOutputDir().absolutePath]) }
            project.exec { commandLine(['unzip', '-q', inputArchive.absolutePath, '-d', getOutputDir().getParentFile().absolutePath]) }
        }
    }
}

abstract class AppImage extends DefaultTask {

    File inputDir
    File jpackagerBin
    File outputDir
    String imageName
    String[] jvmArgs
    String[] args
    String version
    String mainClass
    String mainJarName
    File runtimeImageDirectory
    boolean winConsole
    Map<String, File> launchers

    /*--mac-package-name name string
    Name of the application as it appears in the Menu Bar.
    This can be different from the application name.
    This name must be less than 16 characters long and be suitable for displaying in the menu bar and the application Info window. Defaults to the application name.*/
    String macPackageName = null

    AppImage() {
        imageName = project.name
        jvmArgs = []
        version = project.OS.isWindows() ? project.version.replace('-SNAPSHOT', '') : project.version
        winConsole = false
        inputDir = project.tasks.getByName('installDist').outputs.files.singleFile.toPath().resolve('lib').toFile()
    }

    File getImageDir() {
        return outputDir.toPath().resolve(project.OS.isMacOsX()?"${imageName}.app":imageName).toFile()
    }

    @TaskAction
    def execute() {
        getImageDir().deleteDir()
        String[] p = ['--type', 'app-image']
        p += createParameters()
        project.exec {
            def c = buildCommand(p)
            println c
            commandLine(c)
        }
    }

    def buildCommand(String[] parameters) {
        if (project.OS.isWindows()) {
            //todo windows command line sucks!
            List<String> c = parameters as List
            c.add(0, "\"${jpackagerBin.absolutePath}\"")
            return c.toArray()
        } else {
            getLogger().lifecycle("${jpackagerBin.absolutePath} ${parameters.join(' ')}")
            return ['bash', '-e', '-c', """
                ${jpackagerBin.absolutePath} ${parameters.join(' ')}
                """]
        }
    }

    String[] createParameters() {
        def paras = [
                '--runtime-image', runtimeImageDirectory.absolutePath,
                '-i', inputDir.absolutePath,
                '--dest', outputDir.toString(),
                '--name', imageName,
                '--app-version', version,
                '--main-class', mainClass,
                '--main-jar', mainJarName
        ]

        if (jvmArgs != null)
            for (String arg : jvmArgs)
                paras += ['--java-options', "\"$arg\"",]

        if (args != null)
            for (String arg : args)
                paras += ['--arguments', "\"$arg\""]

        if (launchers != null)
            for (String name : launchers.keySet())
                paras += ["--add-launcher", "\"$name=${launchers.get(name)}\""]


        def iconDir = project.getRootProject().rootDir.toPath().resolve('icons')
        if (project.OS.isWindows()) {
            paras += ["--icon", "${iconDir.resolve('sirius-icon.ico').toString()}"]
            if (winConsole)
                paras += ['--win-console']
        } else if (project.OS.isMacOsX()) {
            paras += ["--icon", "${iconDir.resolve('sirius-icon.icns').toString()}"]
            if (macPackageName != null && !macPackageName.isBlank())
                paras += ['--mac-package-name', "\"$macPackageName\""]
        } else if (project.OS.isLinux()) {
            paras += ["--icon", "${iconDir.resolve('sirius-icon.png').toString()}"]
        } else {
            throw new IllegalArgumentException("Could not determine the OS to build on")
        }
        return paras
    }
}

abstract class AppInstaller extends DefaultTask {
    AppImage distImg
    String[] types
    File licenseFile


    boolean winDirChooser = true
    boolean winMenu = true
    String winMenuGroup = null
    boolean winShortcut
    boolean winPerUserInstall = false


    /*--linux-menu-group <menu-group-name>
          Menu group this application is placed in*/
    String[] linuxMenuGroup = null
    /* --linux-package-deps
          Required packages or capabilities for the application*/
    String[] packageDeps = null
    /*--linux-shortcut
          Creates a shortcut for the application*/
    boolean linuxShortcut = false
    /*--linux-deb-maintainer <email address>
          Maintainer for .deb package*/
    String debPackageMaintaner = null




    /*
   --linux-package-name <package name>
          Name for Linux package, defaults to the application name
  --linux-rpm-license-type <type string>
          Type of the license ("License: <value>" of the RPM .spec)
  --linux-app-release <release value>
          Release value of the RPM <name>.spec file or
          Debian revision value of the DEB control file.
  --linux-app-category <category value>
          Group value of the RPM <name>.spec file or
          Section value of DEB control file.
    * */
    /*
--mac-package-identifier ID string
An identifier that uniquely identifies the application for macOSX.
Defaults to the the main class name.
May only use alphanumeric (A-Z,a-z,0-9), hyphen (-), and period (.) characters.

--mac-bundle-signing-prefix prefix string
When signing the application bundle, this value is prefixed to all components that need to be signed that don't have an existing bundle identifier.
--mac-sign
Request that the bundle be signed.
--mac-signing-keychain file path
Path of the keychain to search for the signing identity (absolute path or relative to the current directory).
If not specified, the standard keychains are used.
--mac-signing-key-user-name team name
Team name portion in Apple signing identities' names.
For example "Developer ID Application: "
**/

    @TaskAction
    def execute() {
        String[] p = ['--type', types.join(',')]
        p += createParameters()
        project.exec {
            def c = distImg.buildCommand(p)
            println c
            commandLine(c)
        }
    }

    String getAppName() {
        return (appName != null && !appName.isBlank()) ? appName : distImg.imageName
    }

    String[] createParameters() {
        String[] paras = []//distImg.createParameters()

        paras += [
                '--name', distImg.imageName,
                '--app-image', distImg.getImageDir().absolutePath,
                '--license-file', licenseFile.absolutePath,
                '--dest', distImg.outputDir.absolutePath,
                '--app-version', distImg.version,
//                "--icon", "${project.getRootProject().rootDir.toPath().resolve('icons').resolve('sirius-icon.png').toString()}"
//                '--install-dirr'
        ]


        if (project.OS.isWindows()) {
            if (winDirChooser)
                paras += ['--win-dir-chooser'/*, winDirChooser ? '1' : '0'*/]
            if (winMenu)
                paras += ['--win-menu'/*, winMenu ? '1' : '0'*/]
            if (winMenuGroup != null && !winMenuGroup.isBlank())
                paras += ['--win-menu-group', "\"$winMenuGroup\""]
            if (winShortcut)
                paras += ['--win-shortcut']
            if (winPerUserInstall)
                paras += ['--win-per-user-install']
        } else if (project.OS.isMacOsX()) {

        } else if (project.OS.isLinux()) {
            if (linuxShortcut)
                paras += ['--linux-shortcut']
            if (debPackageMaintaner != null && !debPackageMaintaner.isBlank())
                paras += ['--linux-deb-maintainer', "\"$debPackageMaintaner\""]
            if (linuxMenuGroup != null && linuxMenuGroup.length > 0)
                paras += ['--linux-menu-group', "\"${linuxMenuGroup.join(';')}\""]
            if (packageDeps != null && packageDeps.length > 0)
                paras += ['--linux-deb-maintainer', "\"${packageDeps.join(',')}\""]
        } else {
            throw new IllegalArgumentException("Could not determine the OS to build on")
        }
        return paras
    }
}
