dependencies {
    compile project(':sirius_gui')
    compile "de.unijena.bioinf.ms:ft_glpk:$siriusVersion"
    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: "$slf4j_version"
}


/*################### Environment variables ################### */
mainClassName = "de.unijena.bioinf.ms.frontend.SiriusGUIApplication"

/*################### Jar build Stuff ################### */
jar {
    enabled = true
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

runtime {
    modules = [
            'java.sql',
            'javafx.base',
            'java.desktop',
            'javafx.web',
            'javafx.graphics',
            'java.logging',
            'javafx.swing',
            'jdk.jsobject',
            'java.xml',
            'jdk.xml.dom',
            'java.datatransfer',
            'java.naming',
            'java.prefs',
            'javafx.controls'
    ]


    jpackage {
        imageName = 'sirius-gui'
        installerName = imageName
        args = ['gui']

        imageOptions += [
                '--add-launcher', "sirius=${project.getRootProject().projectDir}/jpackage/cli-launcher.properties",
        ]

        if (OS.isLinux()) {
            installerOptions += [
                    '--resource-dir', jpackageImage.outputs.files.singleFile.toPath().resolve("${jpackageImage.getJpackageData().imageName}/lib/").toString(),
                    '--linux-shortcut',
            ]
        }
    }
}

publishing {
    publications {
        sirius(org.gradle.api.publish.maven.MavenPublication) {
            artifactId = "$name"
            groupId = "$group"
            jpackage
            artifact source: jpackageImage.outputs.files.singleFile.toPath().resolve("${jpackageImage.getJpackageData().imageName}-${project.version}-${osName}.zip").toFile(), classifier: osName, extension: 'zip'
            artifact source: jpackage.getJpackageData().installerOutputDir.toPath().resolve(jpackage.getJpackageData().installerName + installerAppendix).toFile(), classifier: osName, extension: installerNameType
        }
    }
}

/*
task runGUI(type: Exec, dependsOn: jpackageImage , group: 'application') {
    doFirst {
        getLogger().lifecycle("====> Note: This uses the Systen JRE!")
    }
    File command = project.tasks.installLinux64Dist.outputs.files.singleFile.toPath().resolve("bin/${project.appName}-gui").toFile()
    commandLine([command.absolutePath])
}*/
