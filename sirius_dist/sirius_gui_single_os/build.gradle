dependencies {
    compile project(':sirius_gui')
//    compile "de.unijena.bioinf.ms:ft_glpk:$siriusVersion"
    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: "$slf4j_version"
}


/*################### Environment variables ################### */
mainClassName = "de.unijena.bioinf.ms.frontend.SiriusGUIApplication"

distImage {
    dependsOn getParent().tasks.getByName('extractRuntimeImageFX')
    mainClass = mainClassName
    imageName = 'sirius-gui'
    args = ['gui']
    runtimeImageDirectory = getParent().tasks.getByName('extractRuntimeImageFX').outputs.files.singleFile
    mainJarName = getRootProject().getChildProjects().get('sirius_gui').tasks.getByName('jar').outputs.files.singleFile.getName()
    launchers = ['sirius':getRootProject().rootDir.toPath().resolve('jpackage').resolve('cli-launcher.properties').toFile()]
    winConsole = false
    macPackageName = 'SIRIUS'
    launchers = [
            "sirius-gui":file("${rootDir}/scripts/sirius-gui.sh")
    ]
}

distInstaller{
    linuxShortcut = true
}

distribution.dependsOn 'distImageZip'
distribution.dependsOn 'distInstaller'

publishing {
    publications {
        sirius(org.gradle.api.publish.maven.MavenPublication) {
            artifactId = "$name"
            groupId = "$group"
            artifact source: "${distImage.getImageDir().absolutePath}.zip", classifier: osName, extension: 'zip'
            artifact source: "${OS.isMacOsX() ? distImage.getImageDir().absolutePath.replace('.app', installerAppendix) : distImage.getImageDir().absolutePath + installerAppendix}", classifier: osName, extension: installerNameType
        }
    }
}

/*
task runGUI(type: Exec, dependsOn: jpackageImage , group: 'application') {
    doFirst {
        getLogger().lifecycle("====> Note: This uses the Systen JRE!")
    }
    File command = project.tasks.installLinux64Dist.outputs.files.singleFile.toPath().resolve("bin/${project.appName}-gui").toFile()
    commandLine([command.absolutePath])
}*/

